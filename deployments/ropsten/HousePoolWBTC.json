{
  "address": "0xff8F9d2b7f2ef66F1CFA0A094b998D6538E2D8bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wbtcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WBTCclaimToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_LPTokens",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x866f46d72f71bb94210b64837cd770685daa7479335be8cb818774db11d76880",
  "receipt": {
    "to": null,
    "from": "0xdd8eBa4604D2a9C6c77e4bC557B1884119174726",
    "contractAddress": "0xff8F9d2b7f2ef66F1CFA0A094b998D6538E2D8bF",
    "transactionIndex": 9,
    "gasUsed": "864985",
    "logsBloom": "0x
    "blockHash": "0xecb3278b5fa6e6801e9a2fd914d5764bf2b2588648d1d016e5e04661fa1ffad9",
    "transactionHash": "0x866f46d72f71bb94210b64837cd770685daa7479335be8cb818774db11d76880",
    "logs": [],
    "blockNumber": 11625426,
    "cumulativeGasUsed": "3235309",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9F5b3Eeffb978cF50b897Cb1f44d1a2Ca66acCF9",
    "0xf93890152329c37Cca0393e79964dBC2D703a297"
  ],
  "solcInputHash": "d5dbc86b358482f1bf3d524c8b3fbdf8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbtcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBTCclaimToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_LPTokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HousePoolWBTC.sol\":\"HousePoolWBTC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/HousePoolWBTC.sol\":{\"content\":\"//SPDX-License-Identifier:  MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface WBTCclaimTokenInterface {\\n    function burn(address account,uint tokens)  external;\\n    function mint(address account,uint tokens)  external;\\n    function balanceOf(address tokenOwner) external view  returns (uint getBalance);\\n}\\n\\ncontract HousePoolWBTC is ReentrancyGuard {\\n    \\n    IERC20 wbtcToken;\\n    WBTCclaimTokenInterface WBTCclaimToken;\\n    address owner;\\n    uint256 wbtcLiquidity;\\n    uint256  ExchangeRatio = 100 ;\\n    \\n    mapping(address => uint256) userDepositAmount;\\n\\n    constructor(address _wbtcToken, address _WBTCclaimToken) {\\n        wbtcToken = IERC20(_wbtcToken);\\n        WBTCclaimToken = WBTCclaimTokenInterface(_WBTCclaimToken);\\n        owner = msg.sender;\\n    }\\n\\n    function getLiquidityStatus() view external returns(uint256) {\\n        return wbtcLiquidity;\\n    }\\n\\n    function getUserBalance() view external returns(uint256) {\\n        return userDepositAmount[msg.sender];\\n    }\\n\\n    function deposit(uint256 _amount) external nonReentrant {\\n        require(_amount > 0 && _amount <= wbtcToken.balanceOf(msg.sender),\\\"WBTCHousePool: Check the Balance\\\");\\n        wbtcLiquidity += _amount;\\n        userDepositAmount[msg.sender] += _amount;\\n        wbtcToken.transferFrom(msg.sender, address(this), _amount);\\n        uint256 claimTokensToMint = _amount / ExchangeRatio;\\n        WBTCclaimToken.mint(msg.sender, claimTokensToMint);\\n    }\\n\\n    function withdraw(uint256 _LPTokens) external nonReentrant {\\n        require(_LPTokens > 0,\\\"USDCHousePool: Zero Amount\\\");\\n        require(_LPTokens <= WBTCclaimToken.balanceOf(msg.sender),\\\"WBTCHousePool: Amount exceeded\\\");\\n        uint256 amountToTransfer = _LPTokens * ExchangeRatio;\\n        wbtcLiquidity -= amountToTransfer;\\n        userDepositAmount[msg.sender] -= amountToTransfer;\\n        wbtcToken.transfer(msg.sender,amountToTransfer);\\n        WBTCclaimToken.burn(msg.sender, _LPTokens);\\n    }\\n    \\n}\",\"keccak256\":\"0x0458a64014407f68244eeef548ee162ec2c45672ee9af85d6d78fb5f9b0bf57c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052606460055534801561001557600080fd5b50604051610e53380380610e538339818101604052810190610037919061016c565b600160008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101ac565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101398261010e565b9050919050565b6101498161012e565b811461015457600080fd5b50565b60008151905061016681610140565b92915050565b6000806040838503121561018357610182610109565b5b600061019185828601610157565b92505060206101a285828601610157565b9150509250929050565b610c98806101bb6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e1a7d4d146100515780633c0717fd1461006d578063b6b55f251461008b578063b7013dc1146100a7575b600080fd5b61006b60048036038101906100669190610774565b6100c5565b005b6100756103f1565b60405161008291906107b0565b60405180910390f35b6100a560048036038101906100a09190610774565b6103fb565b005b6100af6106f2565b6040516100bc91906107b0565b60405180910390f35b6002600054141561010b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010290610828565b60405180910390fd5b600260008190555060008111610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d90610894565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101b191906108f5565b602060405180830381865afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610925565b811115610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b9061099e565b60405180910390fd5b60006005548261024491906109ed565b905080600460008282546102589190610a47565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ae9190610a47565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610312929190610a7b565b6020604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190610adc565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016103b3929190610a7b565b600060405180830381600087803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b5050505050600160008190555050565b6000600454905090565b60026000541415610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890610828565b60405180910390fd5b60026000819055506000811180156104f45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104af91906108f5565b602060405180830381865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610925565b8111155b610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610b55565b60405180910390fd5b80600460008282546105459190610b75565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461059b9190610b75565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161060193929190610bcb565b6020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190610adc565b506000600554826106559190610c31565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016106b4929190610a7b565b600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b5050505050600160008190555050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600080fd5b6000819050919050565b6107518161073e565b811461075c57600080fd5b50565b60008135905061076e81610748565b92915050565b60006020828403121561078a57610789610739565b5b60006107988482850161075f565b91505092915050565b6107aa8161073e565b82525050565b60006020820190506107c560008301846107a1565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610812601f836107cb565b915061081d826107dc565b602082019050919050565b6000602082019050818103600083015261084181610805565b9050919050565b7f55534443486f757365506f6f6c3a205a65726f20416d6f756e74000000000000600082015250565b600061087e601a836107cb565b915061088982610848565b602082019050919050565b600060208201905081810360008301526108ad81610871565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108df826108b4565b9050919050565b6108ef816108d4565b82525050565b600060208201905061090a60008301846108e6565b92915050565b60008151905061091f81610748565b92915050565b60006020828403121561093b5761093a610739565b5b600061094984828501610910565b91505092915050565b7f57425443486f757365506f6f6c3a20416d6f756e742065786365656465640000600082015250565b6000610988601e836107cb565b915061099382610952565b602082019050919050565b600060208201905081810360008301526109b78161097b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f88261073e565b9150610a038361073e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a3c57610a3b6109be565b5b828202905092915050565b6000610a528261073e565b9150610a5d8361073e565b925082821015610a7057610a6f6109be565b5b828203905092915050565b6000604082019050610a9060008301856108e6565b610a9d60208301846107a1565b9392505050565b60008115159050919050565b610ab981610aa4565b8114610ac457600080fd5b50565b600081519050610ad681610ab0565b92915050565b600060208284031215610af257610af1610739565b5b6000610b0084828501610ac7565b91505092915050565b7f57425443486f757365506f6f6c3a20436865636b207468652042616c616e6365600082015250565b6000610b3f6020836107cb565b9150610b4a82610b09565b602082019050919050565b60006020820190508181036000830152610b6e81610b32565b9050919050565b6000610b808261073e565b9150610b8b8361073e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bc057610bbf6109be565b5b828201905092915050565b6000606082019050610be060008301866108e6565b610bed60208301856108e6565b610bfa60408301846107a1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c3c8261073e565b9150610c478361073e565b925082610c5757610c56610c02565b5b82820490509291505056fea26469706673582212207748e5e64a52523bc4ec24267ad3eebb2dcf39b197d6ffa550fa40f0e1ecc12d64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e1a7d4d146100515780633c0717fd1461006d578063b6b55f251461008b578063b7013dc1146100a7575b600080fd5b61006b60048036038101906100669190610774565b6100c5565b005b6100756103f1565b60405161008291906107b0565b60405180910390f35b6100a560048036038101906100a09190610774565b6103fb565b005b6100af6106f2565b6040516100bc91906107b0565b60405180910390f35b6002600054141561010b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010290610828565b60405180910390fd5b600260008190555060008111610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d90610894565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101b191906108f5565b602060405180830381865afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610925565b811115610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b9061099e565b60405180910390fd5b60006005548261024491906109ed565b905080600460008282546102589190610a47565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ae9190610a47565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610312929190610a7b565b6020604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190610adc565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016103b3929190610a7b565b600060405180830381600087803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b5050505050600160008190555050565b6000600454905090565b60026000541415610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890610828565b60405180910390fd5b60026000819055506000811180156104f45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104af91906108f5565b602060405180830381865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610925565b8111155b610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610b55565b60405180910390fd5b80600460008282546105459190610b75565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461059b9190610b75565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161060193929190610bcb565b6020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190610adc565b506000600554826106559190610c31565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016106b4929190610a7b565b600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b5050505050600160008190555050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600080fd5b6000819050919050565b6107518161073e565b811461075c57600080fd5b50565b60008135905061076e81610748565b92915050565b60006020828403121561078a57610789610739565b5b60006107988482850161075f565b91505092915050565b6107aa8161073e565b82525050565b60006020820190506107c560008301846107a1565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610812601f836107cb565b915061081d826107dc565b602082019050919050565b6000602082019050818103600083015261084181610805565b9050919050565b7f55534443486f757365506f6f6c3a205a65726f20416d6f756e74000000000000600082015250565b600061087e601a836107cb565b915061088982610848565b602082019050919050565b600060208201905081810360008301526108ad81610871565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108df826108b4565b9050919050565b6108ef816108d4565b82525050565b600060208201905061090a60008301846108e6565b92915050565b60008151905061091f81610748565b92915050565b60006020828403121561093b5761093a610739565b5b600061094984828501610910565b91505092915050565b7f57425443486f757365506f6f6c3a20416d6f756e742065786365656465640000600082015250565b6000610988601e836107cb565b915061099382610952565b602082019050919050565b600060208201905081810360008301526109b78161097b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f88261073e565b9150610a038361073e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a3c57610a3b6109be565b5b828202905092915050565b6000610a528261073e565b9150610a5d8361073e565b925082821015610a7057610a6f6109be565b5b828203905092915050565b6000604082019050610a9060008301856108e6565b610a9d60208301846107a1565b9392505050565b60008115159050919050565b610ab981610aa4565b8114610ac457600080fd5b50565b600081519050610ad681610ab0565b92915050565b600060208284031215610af257610af1610739565b5b6000610b0084828501610ac7565b91505092915050565b7f57425443486f757365506f6f6c3a20436865636b207468652042616c616e6365600082015250565b6000610b3f6020836107cb565b9150610b4a82610b09565b602082019050919050565b60006020820190508181036000830152610b6e81610b32565b9050919050565b6000610b808261073e565b9150610b8b8361073e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bc057610bbf6109be565b5b828201905092915050565b6000606082019050610be060008301866108e6565b610bed60208301856108e6565b610bfa60408301846107a1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c3c8261073e565b9150610c478361073e565b925082610c5757610c56610c02565b5b82820490509291505056fea26469706673582212207748e5e64a52523bc4ec24267ad3eebb2dcf39b197d6ffa550fa40f0e1ecc12d64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 357,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "wbtcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 360,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "WBTCclaimToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(WBTCclaimTokenInterface)352"
      },
      {
        "astId": 362,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 364,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "wbtcLiquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 367,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "ExchangeRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 371,
        "contract": "contracts/HousePoolWBTC.sol:HousePoolWBTC",
        "label": "userDepositAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(WBTCclaimTokenInterface)352": {
        "encoding": "inplace",
        "label": "contract WBTCclaimTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}