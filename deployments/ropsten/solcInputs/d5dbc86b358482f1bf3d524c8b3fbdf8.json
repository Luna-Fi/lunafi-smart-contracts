{
  "language": "Solidity",
  "sources": {
    "contracts/HousePoolUSDC.sol": {
      "content": "// SPDX-License-Identifier:  MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface USDCclaimTokenInterface {\n    function burn(address account,uint tokens)  external;\n    function mint(address account,uint tokens)  external;\n    function balanceOf(address tokenOwner) external view  returns (uint getBalance);\n}\n\ncontract HousePoolUSDC is ReentrancyGuard {\n    \n    IERC20 usdcToken;\n    USDCclaimTokenInterface USDCclaimToken;\n    address owner;\n    uint256 usdcLiquidity;\n    uint256  ExchangeRatio = 100 ;\n\n    mapping(address => uint256) userDepositAmount;\n\n    constructor(address _usdctoken, address _USDCclaimToken) {\n        usdcToken = IERC20(_usdctoken);\n        USDCclaimToken = USDCclaimTokenInterface(_USDCclaimToken);\n        owner = msg.sender;\n    }\n\n    function getLiquidityStatus() view external returns(uint256) {\n        return usdcLiquidity;\n    }\n\n    function getMyBalance() view external returns(uint256) {\n        return userDepositAmount[msg.sender];\n    }\n\n    function deposit(uint256 _amount) external nonReentrant {\n        require(_amount > 0 && _amount <= usdcToken.balanceOf(msg.sender),\"USDCHousePool: Check the Balance\");\n        usdcLiquidity += _amount;\n        userDepositAmount[msg.sender] += _amount;\n        usdcToken.transferFrom(msg.sender,address(this),_amount);\n        uint256 LPTokensToMint = _amount / ExchangeRatio;\n        USDCclaimToken.mint(msg.sender, LPTokensToMint);\n    }\n\n    function withdraw(uint256 _LPTokens) external nonReentrant {\n        require(_LPTokens > 0,\"USDCHousePool: Zero Amount\");\n        require(_LPTokens <= USDCclaimToken.balanceOf(msg.sender),\"USDCHousePool: Amount exceeded\");\n        uint256 amountToTransfer = _LPTokens * ExchangeRatio;\n        usdcLiquidity -= amountToTransfer;\n        userDepositAmount[msg.sender] -= amountToTransfer;\n        usdcToken.transfer(msg.sender,amountToTransfer);\n        USDCclaimToken.burn(msg.sender, _LPTokens);\n    }\n\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/HousePoolWETH.sol": {
      "content": "//SPDX-License-Identifier:  MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface WETHclaimTokenInterface {\n    function burn(address account,uint tokens)  external;\n    function mint(address account,uint tokens)  external;\n    function balanceOf(address tokenOwner) external view  returns (uint getBalance);\n}\n\ncontract HousePoolWETH is ReentrancyGuard {\n    \n    IERC20 wethToken;\n    WETHclaimTokenInterface WETHclaimToken;\n    address owner;\n    uint256 wethLiquidity;\n    uint256  ExchangeRatio = 100 ;\n    \n    mapping(address => uint256) userDepositAmount;\n\n    constructor(address _wethToken, address _WETHclaimToken) {\n        wethToken = IERC20(_wethToken);\n        WETHclaimToken = WETHclaimTokenInterface(_WETHclaimToken);\n        owner = msg.sender;\n    }\n\n    function getLiquidityStatus() view external returns(uint256) {\n        return wethLiquidity;\n    }\n\n    function getUserBalance() view external returns(uint256) {\n        return userDepositAmount[msg.sender];\n    }\n\n    function deposit(uint256 _amount) external nonReentrant {\n        require(_amount > 0 && _amount <= wethToken.balanceOf(msg.sender),\"WETHHousePool: Check the Balance\");\n        wethLiquidity += _amount;\n        userDepositAmount[msg.sender] += _amount;\n        wethToken.transferFrom(msg.sender, address(this), _amount);\n        uint256 claimTokensToMint = _amount / ExchangeRatio;\n        WETHclaimToken.mint(msg.sender, claimTokensToMint);\n    }\n\n    function withdraw(uint256 _LPTokens) external nonReentrant {\n        require(_LPTokens > 0,\"USDCHousePool: Zero Amount\");\n        require(_LPTokens <= WETHclaimToken.balanceOf(msg.sender),\"WETHHousePool: Amount exceeded\");\n        uint256 amountToTransfer = _LPTokens * ExchangeRatio;\n        wethLiquidity -= amountToTransfer;\n        userDepositAmount[msg.sender] -= amountToTransfer;\n        wethToken.transfer(msg.sender,amountToTransfer);\n        WETHclaimToken.burn(msg.sender, _LPTokens);\n    }\n\n}"
    },
    "contracts/HousePoolWBTC.sol": {
      "content": "//SPDX-License-Identifier:  MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface WBTCclaimTokenInterface {\n    function burn(address account,uint tokens)  external;\n    function mint(address account,uint tokens)  external;\n    function balanceOf(address tokenOwner) external view  returns (uint getBalance);\n}\n\ncontract HousePoolWBTC is ReentrancyGuard {\n    \n    IERC20 wbtcToken;\n    WBTCclaimTokenInterface WBTCclaimToken;\n    address owner;\n    uint256 wbtcLiquidity;\n    uint256  ExchangeRatio = 100 ;\n    \n    mapping(address => uint256) userDepositAmount;\n\n    constructor(address _wbtcToken, address _WBTCclaimToken) {\n        wbtcToken = IERC20(_wbtcToken);\n        WBTCclaimToken = WBTCclaimTokenInterface(_WBTCclaimToken);\n        owner = msg.sender;\n    }\n\n    function getLiquidityStatus() view external returns(uint256) {\n        return wbtcLiquidity;\n    }\n\n    function getUserBalance() view external returns(uint256) {\n        return userDepositAmount[msg.sender];\n    }\n\n    function deposit(uint256 _amount) external nonReentrant {\n        require(_amount > 0 && _amount <= wbtcToken.balanceOf(msg.sender),\"WBTCHousePool: Check the Balance\");\n        wbtcLiquidity += _amount;\n        userDepositAmount[msg.sender] += _amount;\n        wbtcToken.transferFrom(msg.sender, address(this), _amount);\n        uint256 claimTokensToMint = _amount / ExchangeRatio;\n        WBTCclaimToken.mint(msg.sender, claimTokensToMint);\n    }\n\n    function withdraw(uint256 _LPTokens) external nonReentrant {\n        require(_LPTokens > 0,\"USDCHousePool: Zero Amount\");\n        require(_LPTokens <= WBTCclaimToken.balanceOf(msg.sender),\"WBTCHousePool: Amount exceeded\");\n        uint256 amountToTransfer = _LPTokens * ExchangeRatio;\n        wbtcLiquidity -= amountToTransfer;\n        userDepositAmount[msg.sender] -= amountToTransfer;\n        wbtcToken.transfer(msg.sender,amountToTransfer);\n        WBTCclaimToken.burn(msg.sender, _LPTokens);\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}