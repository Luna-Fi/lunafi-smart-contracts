{
  "address": "0x17ca394A958D53a1dAe1C4953AB7aC0d276418cE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cooldownSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeWindow",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositLFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardsPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userCooldownTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToReceive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "getNextCooldownTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemLFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerRewardsToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakersCooldowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "updateFarm",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accRewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct VLFI.FarmInfo",
          "name": "farm",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLFIDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e8a344175a0bad6ad7196f19b35b41827c5de4fc32a082c483a43ecaf0766b0",
  "receipt": {
    "to": null,
    "from": "0xdd8eBa4604D2a9C6c77e4bC557B1884119174726",
    "contractAddress": "0x17ca394A958D53a1dAe1C4953AB7aC0d276418cE",
    "transactionIndex": 24,
    "gasUsed": "2889195",
    "logsBloom": "0x
    "blockHash": "0x0d3eeaec66c64d0f18199a1c1bab815283419678e9f67b82b5c9eab9af5bc8e3",
    "transactionHash": "0x0e8a344175a0bad6ad7196f19b35b41827c5de4fc32a082c483a43ecaf0766b0",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 25361728,
        "transactionHash": "0x0e8a344175a0bad6ad7196f19b35b41827c5de4fc32a082c483a43ecaf0766b0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dd8eba4604d2a9c6c77e4bc557b1884119174726",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f658fb27e25000000000000000000000000000000000000000000000000000f5b86e2ab56844400000000000000000000000000000000000000000000068b9444cd8d52c5811c0000000000000000000000000000000000000000000000000f4c2152f8d85f4400000000000000000000000000000000000000000000068b9454331d0543a61c",
        "logIndex": 96,
        "blockHash": "0x0d3eeaec66c64d0f18199a1c1bab815283419678e9f67b82b5c9eab9af5bc8e3"
      }
    ],
    "blockNumber": 25361728,
    "cumulativeGasUsed": "7615127",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "VLFI",
    "VLFI",
    "0x9c4c940205cF972e0B5742c17B3B9a3eAAF87a47",
    600,
    60
  ],
  "solcInputHash": "d02bea457584b8afd70709480c88c52c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemLFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateFarm\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"internalType\":\"struct VLFI.FarmInfo\",\"name\":\"farm\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLFIDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VLFI.sol\":\"VLFI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VLFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract VLFI is ERC20 {\\n\\n    using SafeERC20 for IERC20;\\n\\n    struct FarmInfo {\\n       uint256 accRewardsPerShare;\\n       uint256 lastRewardTime ;\\n    }\\n\\n    struct UserInfo{\\n        uint256 amount;\\n        int256 rewardDebt;\\n    }\\n\\n    FarmInfo public farmInfo;\\n    uint256 public rewardPerSecond;\\n    mapping (address => UserInfo) public userInfo;\\n\\n    uint256 constant MAX_PRECISION = 18;\\n    uint256 conversionPrice = 1000*10**MAX_PRECISION; \\n    IERC20 public immutable STAKED_TOKEN;\\n    uint256 public immutable COOLDOWN_SECONDS;\\n    uint256 public immutable UNSTAKE_WINDOW;\\n    mapping(address => uint256) public stakerRewardsToClaim;\\n    mapping(address => uint256) public stakersCooldowns;\\n    mapping(address => uint256) public userLFIDeposits;\\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n    event Deposited(address indexed from, address indexed onBehalfOf, uint256 amount);\\n    event Redeemed(address indexed from, address indexed to, uint256 amount);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        IERC20 stakedToken,\\n        uint256 cooldownSeconds,\\n        uint256 unstakeWindow\\n    ) ERC20(name,symbol){\\n        STAKED_TOKEN = stakedToken;\\n        COOLDOWN_SECONDS = cooldownSeconds;\\n        UNSTAKE_WINDOW = unstakeWindow;\\n    }\\n\\n    function updateFarm(address user) public returns(FarmInfo memory farm) {\\n        farm = farmInfo;\\n        if(farm.lastRewardTime < block.timestamp) {\\n            uint256 lpsupply = balanceOf(user);\\n            if(lpsupply > 0) {\\n                uint256 time = block.timestamp - farm.lastRewardTime;\\n                uint256 rewardAmount = time * rewardPerSecond;\\n                farm.accRewardsPerShare += rewardAmount * ACC_REWARD_PRECISION / lpsupply;\\n            }\\n            farm.lastRewardTime = block.timestamp;\\n            farmInfo = farm;\\n        }\\n    }\\n\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public  {\\n        rewardPerSecond = _rewardPerSecond;\\n    }\\n\\n    function createFarm() external {\\n        farmInfo = FarmInfo({\\n            accRewardsPerShare: 0,\\n            lastRewardTime: block.timestamp\\n        });\\n    }\\n\\n    function depositLFI(uint256 amount) external { //LFI\\n        require(amount != 0,\\\"VLFI:INVALID_AMOUNT\\\");\\n        uint256 balanceOfUser = balanceOf(msg.sender); \\n        FarmInfo memory farm = updateFarm(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.amount += balanceOfUser;\\n        user.rewardDebt = int(balanceOfUser * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        stakersCooldowns[msg.sender] = getNextCooldownTimestamp(0, amount, msg.sender, balanceOfUser);\\n        _mint(msg.sender,(amount/conversionPrice)* 10**18); // When it's minting in the stakedVLI check whether before transfer happens\\n        IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposited(msg.sender, msg.sender, amount);\\n    }\\n\\n    function redeemLFI(uint256 amount) external {\\n        require(amount != 0,\\\"VLFI:INVALID_AMOUNT\\\");\\n        uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n        require(\\n            (block.timestamp) > (cooldownStartTimestamp + (COOLDOWN_SECONDS)),\\n            \\\"VLFI:INSUFFICIENT_COOLDOWN\\\"\\n        );\\n        require(\\n            block.timestamp - (cooldownStartTimestamp + (COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n            \\\"VLFI:UNSTAKE_WINDOW_FINISHED\\\"\\n    );\\n        uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n        uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n        FarmInfo memory farm = updateFarm(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.rewardDebt -= int(balanceOfMessageSender * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        user.amount -= amountToRedeem/conversionPrice *10 **18;\\n        _burn(msg.sender, (amountToRedeem/conversionPrice)*10**18);\\n        if (balanceOfMessageSender - (amountToRedeem) == 0) {\\n             stakersCooldowns[msg.sender] = 0;\\n        }\\n        IERC20(STAKED_TOKEN).safeTransfer(msg.sender, amountToRedeem);\\n        emit Redeemed(msg.sender,msg.sender,amountToRedeem);\\n    }\\n\\n    function cooldown() external {\\n    require(balanceOf(msg.sender) != 0, \\\"VLFI:INVALID_BALANCE_ON_COOLDOWN\\\");\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    }\\n\\n    function claimRewards() external {\\n        FarmInfo memory farm = updateFarm(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        int accumulatedReward = int(user.amount * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        uint _pendingReward = uint(accumulatedReward - user.rewardDebt);\\n        user.rewardDebt = accumulatedReward; //check for the reward debt again.\\n        IERC20(STAKED_TOKEN).transfer(msg.sender, _pendingReward);\\n  }\\n\\n    function getNextCooldownTimestamp(\\n    uint256 userCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      ((block.timestamp - COOLDOWN_SECONDS) - (UNSTAKE_WINDOW));\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > userCooldownTimestamp)\\n          ? block.timestamp\\n          : userCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive * (fromCooldownTimestamp) + (toBalance * (toCooldownTimestamp))\\n        ) / (amountToReceive + (toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  \\n\\n}\",\"keccak256\":\"0x4dbba32ff4d6ae36eaa57f96f46ad01271d3100b96ae79ed6b00202235ab7f4a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526012600a6200001491906200031b565b6103e86200002391906200036c565b6009553480156200003357600080fd5b506040516200397238038062003972833981810160405281019062000059919062000614565b8484816003908051906020019062000073929190620000de565b5080600490805190602001906200008c929190620000de565b5050508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508160a081815250508060c0818152505050505050506200073f565b828054620000ec9062000709565b90600052602060002090601f0160209004810192826200011057600085556200015c565b82601f106200012b57805160ff19168380011785556200015c565b828001600101855582156200015c579182015b828111156200015b5782518255916020019190600101906200013e565b5b5090506200016b91906200016f565b5090565b5b808211156200018a57600081600090555060010162000170565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200021c57808604811115620001f457620001f36200018e565b5b6001851615620002045780820291505b80810290506200021485620001bd565b9450620001d4565b94509492505050565b6000826200023757600190506200030a565b816200024757600090506200030a565b81600181146200026057600281146200026b57620002a1565b60019150506200030a565b60ff84111562000280576200027f6200018e565b5b8360020a9150848211156200029a57620002996200018e565b5b506200030a565b5060208310610133831016604e8410600b8410161715620002db5782820a905083811115620002d557620002d46200018e565b5b6200030a565b620002ea8484846001620001ca565b925090508184048111156200030457620003036200018e565b5b81810290505b9392505050565b6000819050919050565b6000620003288262000311565b9150620003358362000311565b9250620003647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000225565b905092915050565b6000620003798262000311565b9150620003868362000311565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620003c257620003c16200018e565b5b828202905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043682620003eb565b810181811067ffffffffffffffff82111715620004585762000457620003fc565b5b80604052505050565b60006200046d620003cd565b90506200047b82826200042b565b919050565b600067ffffffffffffffff8211156200049e576200049d620003fc565b5b620004a982620003eb565b9050602081019050919050565b60005b83811015620004d6578082015181840152602081019050620004b9565b83811115620004e6576000848401525b50505050565b600062000503620004fd8462000480565b62000461565b905082815260208101848484011115620005225762000521620003e6565b5b6200052f848285620004b6565b509392505050565b600082601f8301126200054f576200054e620003e1565b5b815162000561848260208601620004ec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000597826200056a565b9050919050565b6000620005ab826200058a565b9050919050565b620005bd816200059e565b8114620005c957600080fd5b50565b600081519050620005dd81620005b2565b92915050565b620005ee8162000311565b8114620005fa57600080fd5b50565b6000815190506200060e81620005e3565b92915050565b600080600080600060a08688031215620006335762000632620003d7565b5b600086015167ffffffffffffffff811115620006545762000653620003dc565b5b620006628882890162000537565b955050602086015167ffffffffffffffff811115620006865762000685620003dc565b5b620006948882890162000537565b9450506040620006a788828901620005cc565b9350506060620006ba88828901620005fd565b9250506080620006cd88828901620005fd565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072257607f821691505b60208210811415620007395762000738620006da565b5b50919050565b60805160a05160c0516131cb620007a76000396000818161081b01528181610f0001526113a4015260008181610ca501528181610e9301528181610f2101526113c50152600081816107ee015281816108d401528181610b89015261110701526131cb6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806366da5815116100f957806395d89b4111610097578063a9059cbb11610071578063a9059cbb146104fb578063dd62ed3e1461052b578063f1cc432a1461055b578063f53cdbcb1461058b576101c4565b806395d89b41146104915780639f1d2ffa146104af578063a457c2d7146104cb576101c4565b806372b49d63116100d357806372b49d631461041b578063787a08a6146104395780637e90d7ef146104435780638f10369a14610473576101c4565b806366da58151461039f5780636fbc92a2146103bb57806370a08231146103eb576101c4565b806323b872dd11610166578063359c4a9611610140578063359c4a961461032b578063372500ab1461034957806339509351146103535780634e253ad014610383576101c4565b806323b872dd146102bf578063312f6b83146102ef578063313ce5671461030d576101c4565b806318160ddd116101a257806318160ddd146102475780631959a002146102655780631d49d66c146102965780631d5ec3cb146102b5576101c4565b806306fdde03146101c9578063091030c3146101e7578063095ea7b314610217575b600080fd5b6101d16105bb565b6040516101de9190612115565b60405180910390f35b61020160048036038101906101fc919061219a565b61064d565b60405161020e91906121e0565b60405180910390f35b610231600480360381019061022c9190612227565b610665565b60405161023e9190612282565b60405180910390f35b61024f610683565b60405161025c91906121e0565b60405180910390f35b61027f600480360381019061027a919061219a565b61068d565b60405161028d9291906122b6565b60405180910390f35b61029e6106b1565b6040516102ac9291906122df565b60405180910390f35b6102bd6106c3565b005b6102d960048036038101906102d49190612308565b6106f4565b6040516102e69190612282565b60405180910390f35b6102f76107ec565b60405161030491906123ba565b60405180910390f35b610315610810565b60405161032291906123f1565b60405180910390f35b610333610819565b60405161034091906121e0565b60405180910390f35b61035161083d565b005b61036d60048036038101906103689190612227565b610977565b60405161037a9190612282565b60405180910390f35b61039d6004803603810190610398919061240c565b610a23565b005b6103b960048036038101906103b4919061240c565b610c39565b005b6103d560048036038101906103d0919061219a565b610c43565b6040516103e291906121e0565b60405180910390f35b6104056004803603810190610400919061219a565b610c5b565b60405161041291906121e0565b60405180910390f35b610423610ca3565b60405161043091906121e0565b60405180910390f35b610441610cc7565b005b61045d6004803603810190610458919061219a565b610d59565b60405161046a91906121e0565b60405180910390f35b61047b610d71565b60405161048891906121e0565b60405180910390f35b610499610d77565b6040516104a69190612115565b60405180910390f35b6104c960048036038101906104c4919061240c565b610e09565b005b6104e560048036038101906104e09190612227565b6111b8565b6040516104f29190612282565b60405180910390f35b61051560048036038101906105109190612227565b6112a3565b6040516105229190612282565b60405180910390f35b61054560048036038101906105409190612439565b6112c1565b60405161055291906121e0565b60405180910390f35b61057560048036038101906105709190612479565b611348565b60405161058291906121e0565b60405180910390f35b6105a560048036038101906105a0919061219a565b61147c565b6040516105b2919061251e565b60405180910390f35b6060600380546105ca90612568565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690612568565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b5050505050905090565b600b6020528060005260406000206000915090505481565b6000610679610672611551565b8484611559565b6001905092915050565b6000600254905090565b60086020528060005260406000206000915090508060000154908060010154905082565b60058060000154908060010154905082565b6040518060400160405280600081526020014281525060056000820151816000015560208201518160010155905050565b6000610701848484611724565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061074c611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c39061260c565b60405180910390fd5b6107e0856107d8611551565b858403611559565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108483361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600064e8d4a51000836000015183600001546108a9919061265b565b6108b391906126e4565b905060008260010154826108c79190612715565b90508183600101819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161092d9291906127b8565b6020604051808303816000875af115801561094c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610970919061280d565b5050505050565b6000610a19610984611551565b848460016000610992611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a14919061283a565b611559565b6001905092915050565b6000811415610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e906128dc565b60405180910390fd5b6000610a7233610c5b565b90506000610a7f3361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000016000828254610ad8919061283a565b9250508190555064e8d4a51000826000015184610af5919061265b565b610aff91906126e4565b8160010181905550610b146000853386611348565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8133670de0b6b3a764000060095487610b7291906126e4565b610b7c919061265b565b6119a5565b610bce3330867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611b05909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a786604051610c2b91906121e0565b60405180910390a350505050565b8060078190555050565b600c6020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610cd233610c5b565b1415610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90612948565b60405180910390fd5b42600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600a6020528060005260406000206000915090505481565b60075481565b606060048054610d8690612568565b80601f0160208091040260200160405190810160405280929190818152602001828054610db290612568565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b5050505050905090565b6000811415610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e44906128dc565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000081610ebd919061283a565b4211610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef5906129b4565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000082610f4b919061283a565b42610f5691906129d4565b1115610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e90612a54565b60405180910390fd5b6000610fa233610c5b565b90506000818411610fb35783610fb5565b815b90506000610fc23361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905064e8d4a5100082600001518561101d919061265b565b61102791906126e4565b81600101600082825461103a9190612715565b92505081905550670de0b6b3a76400006009548461105891906126e4565b611062919061265b565b81600001600082825461107591906129d4565b925050819055506110a633670de0b6b3a76400006009548661109791906126e4565b6110a1919061265b565b611b8e565b600083856110b491906129d4565b1415611100576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61114b33847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d659092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc856040516111a891906121e0565b60405180910390a3505050505050565b600080600160006111c7611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127b90612ae6565b60405180910390fd5b61129861128f611551565b85858403611559565b600191505092915050565b60006112b76112b0611551565b8484611724565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156113a0576000915050611474565b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000426113ef91906129d4565b6113f991906129d4565b90508181111561140c576000915061146e565b600087821161141b578761141d565b425b90508281101561143257829350505050611474565b848761143e919061283a565b838661144a919061265b565b8289611456919061265b565b611460919061283a565b61146a91906126e4565b9250505b81925050505b949350505050565b611484612062565b6005604051806040016040529081600082015481526020016001820154815250509050428160200151101561154c5760006114be83610c5b565b905060008111156115265760008260200151426114db91906129d4565b90506000600754826114ed919061265b565b90508264e8d4a5100082611501919061265b565b61150b91906126e4565b8460000181815161151c919061283a565b9150818152505050505b428260200181815250508160056000820151816000015560208201518160010155905050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090612b78565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163090612c0a565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161171791906121e0565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178b90612c9c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90612d2e565b60405180910390fd5b61180f838383611deb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188c90612dc0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611928919061283a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161198c91906121e0565b60405180910390a361199f848484611df0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c90612e2c565b60405180910390fd5b611a2160008383611deb565b8060026000828254611a33919061283a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a88919061283a565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611aed91906121e0565b60405180910390a3611b0160008383611df0565b5050565b611b88846323b872dd60e01b858585604051602401611b2693929190612e4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611df5565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf590612ef5565b60405180910390fd5b611c0a82600083611deb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8790612f87565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254611ce791906129d4565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d4c91906121e0565b60405180910390a3611d6083600084611df0565b505050565b611de68363a9059cbb60e01b8484604051602401611d849291906127b8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611df5565b505050565b505050565b505050565b6000611e57826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ebc9092919063ffffffff16565b9050600081511115611eb75780806020019051810190611e77919061280d565b611eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ead90613019565b60405180910390fd5b5b505050565b6060611ecb8484600085611ed4565b90509392505050565b606082471015611f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f10906130ab565b60405180910390fd5b611f2285611fe8565b611f61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5890613117565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f8a919061317e565b60006040518083038185875af1925050503d8060008114611fc7576040519150601f19603f3d011682016040523d82523d6000602084013e611fcc565b606091505b5091509150611fdc828286611ffb565b92505050949350505050565b600080823b905060008111915050919050565b6060831561200b5782905061205b565b60008351111561201e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120529190612115565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156120b657808201518184015260208101905061209b565b838111156120c5576000848401525b50505050565b6000601f19601f8301169050919050565b60006120e78261207c565b6120f18185612087565b9350612101818560208601612098565b61210a816120cb565b840191505092915050565b6000602082019050818103600083015261212f81846120dc565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121678261213c565b9050919050565b6121778161215c565b811461218257600080fd5b50565b6000813590506121948161216e565b92915050565b6000602082840312156121b0576121af612137565b5b60006121be84828501612185565b91505092915050565b6000819050919050565b6121da816121c7565b82525050565b60006020820190506121f560008301846121d1565b92915050565b612204816121c7565b811461220f57600080fd5b50565b600081359050612221816121fb565b92915050565b6000806040838503121561223e5761223d612137565b5b600061224c85828601612185565b925050602061225d85828601612212565b9150509250929050565b60008115159050919050565b61227c81612267565b82525050565b60006020820190506122976000830184612273565b92915050565b6000819050919050565b6122b08161229d565b82525050565b60006040820190506122cb60008301856121d1565b6122d860208301846122a7565b9392505050565b60006040820190506122f460008301856121d1565b61230160208301846121d1565b9392505050565b60008060006060848603121561232157612320612137565b5b600061232f86828701612185565b935050602061234086828701612185565b925050604061235186828701612212565b9150509250925092565b6000819050919050565b600061238061237b6123768461213c565b61235b565b61213c565b9050919050565b600061239282612365565b9050919050565b60006123a482612387565b9050919050565b6123b481612399565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b600060ff82169050919050565b6123eb816123d5565b82525050565b600060208201905061240660008301846123e2565b92915050565b60006020828403121561242257612421612137565b5b600061243084828501612212565b91505092915050565b600080604083850312156124505761244f612137565b5b600061245e85828601612185565b925050602061246f85828601612185565b9150509250929050565b6000806000806080858703121561249357612492612137565b5b60006124a187828801612212565b94505060206124b287828801612212565b93505060406124c387828801612185565b92505060606124d487828801612212565b91505092959194509250565b6124e9816121c7565b82525050565b60408201600082015161250560008501826124e0565b50602082015161251860208501826124e0565b50505050565b600060408201905061253360008301846124ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061258057607f821691505b6020821081141561259457612593612539565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006125f6602883612087565b91506126018261259a565b604082019050919050565b60006020820190508181036000830152612625816125e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612666826121c7565b9150612671836121c7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126aa576126a961262c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126ef826121c7565b91506126fa836121c7565b92508261270a576127096126b5565b5b828204905092915050565b60006127208261229d565b915061272b8361229d565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156127665761276561262c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561279e5761279d61262c565b5b828203905092915050565b6127b28161215c565b82525050565b60006040820190506127cd60008301856127a9565b6127da60208301846121d1565b9392505050565b6127ea81612267565b81146127f557600080fd5b50565b600081519050612807816127e1565b92915050565b60006020828403121561282357612822612137565b5b6000612831848285016127f8565b91505092915050565b6000612845826121c7565b9150612850836121c7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128855761288461262c565b5b828201905092915050565b7f564c46493a494e56414c49445f414d4f554e5400000000000000000000000000600082015250565b60006128c6601383612087565b91506128d182612890565b602082019050919050565b600060208201905081810360008301526128f5816128b9565b9050919050565b7f564c46493a494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e600082015250565b6000612932602083612087565b915061293d826128fc565b602082019050919050565b6000602082019050818103600083015261296181612925565b9050919050565b7f564c46493a494e53554646494349454e545f434f4f4c444f574e000000000000600082015250565b600061299e601a83612087565b91506129a982612968565b602082019050919050565b600060208201905081810360008301526129cd81612991565b9050919050565b60006129df826121c7565b91506129ea836121c7565b9250828210156129fd576129fc61262c565b5b828203905092915050565b7f564c46493a554e5354414b455f57494e444f575f46494e495348454400000000600082015250565b6000612a3e601c83612087565b9150612a4982612a08565b602082019050919050565b60006020820190508181036000830152612a6d81612a31565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612ad0602583612087565b9150612adb82612a74565b604082019050919050565b60006020820190508181036000830152612aff81612ac3565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b62602483612087565b9150612b6d82612b06565b604082019050919050565b60006020820190508181036000830152612b9181612b55565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bf4602283612087565b9150612bff82612b98565b604082019050919050565b60006020820190508181036000830152612c2381612be7565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612c86602583612087565b9150612c9182612c2a565b604082019050919050565b60006020820190508181036000830152612cb581612c79565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612d18602383612087565b9150612d2382612cbc565b604082019050919050565b60006020820190508181036000830152612d4781612d0b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612daa602683612087565b9150612db582612d4e565b604082019050919050565b60006020820190508181036000830152612dd981612d9d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612e16601f83612087565b9150612e2182612de0565b602082019050919050565b60006020820190508181036000830152612e4581612e09565b9050919050565b6000606082019050612e6160008301866127a9565b612e6e60208301856127a9565b612e7b60408301846121d1565b949350505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612edf602183612087565b9150612eea82612e83565b604082019050919050565b60006020820190508181036000830152612f0e81612ed2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f71602283612087565b9150612f7c82612f15565b604082019050919050565b60006020820190508181036000830152612fa081612f64565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613003602a83612087565b915061300e82612fa7565b604082019050919050565b6000602082019050818103600083015261303281612ff6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613095602683612087565b91506130a082613039565b604082019050919050565b600060208201905081810360008301526130c481613088565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613101601d83612087565b915061310c826130cb565b602082019050919050565b60006020820190508181036000830152613130816130f4565b9050919050565b600081519050919050565b600081905092915050565b600061315882613137565b6131628185613142565b9350613172818560208601612098565b80840191505092915050565b600061318a828461314d565b91508190509291505056fea26469706673582212202d232e4f79a1dd5051976b0452d5b61421aad025386bd4715269ae42f9864cc264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806366da5815116100f957806395d89b4111610097578063a9059cbb11610071578063a9059cbb146104fb578063dd62ed3e1461052b578063f1cc432a1461055b578063f53cdbcb1461058b576101c4565b806395d89b41146104915780639f1d2ffa146104af578063a457c2d7146104cb576101c4565b806372b49d63116100d357806372b49d631461041b578063787a08a6146104395780637e90d7ef146104435780638f10369a14610473576101c4565b806366da58151461039f5780636fbc92a2146103bb57806370a08231146103eb576101c4565b806323b872dd11610166578063359c4a9611610140578063359c4a961461032b578063372500ab1461034957806339509351146103535780634e253ad014610383576101c4565b806323b872dd146102bf578063312f6b83146102ef578063313ce5671461030d576101c4565b806318160ddd116101a257806318160ddd146102475780631959a002146102655780631d49d66c146102965780631d5ec3cb146102b5576101c4565b806306fdde03146101c9578063091030c3146101e7578063095ea7b314610217575b600080fd5b6101d16105bb565b6040516101de9190612115565b60405180910390f35b61020160048036038101906101fc919061219a565b61064d565b60405161020e91906121e0565b60405180910390f35b610231600480360381019061022c9190612227565b610665565b60405161023e9190612282565b60405180910390f35b61024f610683565b60405161025c91906121e0565b60405180910390f35b61027f600480360381019061027a919061219a565b61068d565b60405161028d9291906122b6565b60405180910390f35b61029e6106b1565b6040516102ac9291906122df565b60405180910390f35b6102bd6106c3565b005b6102d960048036038101906102d49190612308565b6106f4565b6040516102e69190612282565b60405180910390f35b6102f76107ec565b60405161030491906123ba565b60405180910390f35b610315610810565b60405161032291906123f1565b60405180910390f35b610333610819565b60405161034091906121e0565b60405180910390f35b61035161083d565b005b61036d60048036038101906103689190612227565b610977565b60405161037a9190612282565b60405180910390f35b61039d6004803603810190610398919061240c565b610a23565b005b6103b960048036038101906103b4919061240c565b610c39565b005b6103d560048036038101906103d0919061219a565b610c43565b6040516103e291906121e0565b60405180910390f35b6104056004803603810190610400919061219a565b610c5b565b60405161041291906121e0565b60405180910390f35b610423610ca3565b60405161043091906121e0565b60405180910390f35b610441610cc7565b005b61045d6004803603810190610458919061219a565b610d59565b60405161046a91906121e0565b60405180910390f35b61047b610d71565b60405161048891906121e0565b60405180910390f35b610499610d77565b6040516104a69190612115565b60405180910390f35b6104c960048036038101906104c4919061240c565b610e09565b005b6104e560048036038101906104e09190612227565b6111b8565b6040516104f29190612282565b60405180910390f35b61051560048036038101906105109190612227565b6112a3565b6040516105229190612282565b60405180910390f35b61054560048036038101906105409190612439565b6112c1565b60405161055291906121e0565b60405180910390f35b61057560048036038101906105709190612479565b611348565b60405161058291906121e0565b60405180910390f35b6105a560048036038101906105a0919061219a565b61147c565b6040516105b2919061251e565b60405180910390f35b6060600380546105ca90612568565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690612568565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b5050505050905090565b600b6020528060005260406000206000915090505481565b6000610679610672611551565b8484611559565b6001905092915050565b6000600254905090565b60086020528060005260406000206000915090508060000154908060010154905082565b60058060000154908060010154905082565b6040518060400160405280600081526020014281525060056000820151816000015560208201518160010155905050565b6000610701848484611724565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061074c611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c39061260c565b60405180910390fd5b6107e0856107d8611551565b858403611559565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108483361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600064e8d4a51000836000015183600001546108a9919061265b565b6108b391906126e4565b905060008260010154826108c79190612715565b90508183600101819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161092d9291906127b8565b6020604051808303816000875af115801561094c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610970919061280d565b5050505050565b6000610a19610984611551565b848460016000610992611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a14919061283a565b611559565b6001905092915050565b6000811415610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e906128dc565b60405180910390fd5b6000610a7233610c5b565b90506000610a7f3361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000016000828254610ad8919061283a565b9250508190555064e8d4a51000826000015184610af5919061265b565b610aff91906126e4565b8160010181905550610b146000853386611348565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8133670de0b6b3a764000060095487610b7291906126e4565b610b7c919061265b565b6119a5565b610bce3330867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611b05909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a786604051610c2b91906121e0565b60405180910390a350505050565b8060078190555050565b600c6020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610cd233610c5b565b1415610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90612948565b60405180910390fd5b42600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600a6020528060005260406000206000915090505481565b60075481565b606060048054610d8690612568565b80601f0160208091040260200160405190810160405280929190818152602001828054610db290612568565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b5050505050905090565b6000811415610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e44906128dc565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000081610ebd919061283a565b4211610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef5906129b4565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000082610f4b919061283a565b42610f5691906129d4565b1115610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e90612a54565b60405180910390fd5b6000610fa233610c5b565b90506000818411610fb35783610fb5565b815b90506000610fc23361147c565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905064e8d4a5100082600001518561101d919061265b565b61102791906126e4565b81600101600082825461103a9190612715565b92505081905550670de0b6b3a76400006009548461105891906126e4565b611062919061265b565b81600001600082825461107591906129d4565b925050819055506110a633670de0b6b3a76400006009548661109791906126e4565b6110a1919061265b565b611b8e565b600083856110b491906129d4565b1415611100576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61114b33847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d659092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc856040516111a891906121e0565b60405180910390a3505050505050565b600080600160006111c7611551565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127b90612ae6565b60405180910390fd5b61129861128f611551565b85858403611559565b600191505092915050565b60006112b76112b0611551565b8484611724565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156113a0576000915050611474565b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000426113ef91906129d4565b6113f991906129d4565b90508181111561140c576000915061146e565b600087821161141b578761141d565b425b90508281101561143257829350505050611474565b848761143e919061283a565b838661144a919061265b565b8289611456919061265b565b611460919061283a565b61146a91906126e4565b9250505b81925050505b949350505050565b611484612062565b6005604051806040016040529081600082015481526020016001820154815250509050428160200151101561154c5760006114be83610c5b565b905060008111156115265760008260200151426114db91906129d4565b90506000600754826114ed919061265b565b90508264e8d4a5100082611501919061265b565b61150b91906126e4565b8460000181815161151c919061283a565b9150818152505050505b428260200181815250508160056000820151816000015560208201518160010155905050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090612b78565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163090612c0a565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161171791906121e0565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178b90612c9c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90612d2e565b60405180910390fd5b61180f838383611deb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188c90612dc0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611928919061283a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161198c91906121e0565b60405180910390a361199f848484611df0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c90612e2c565b60405180910390fd5b611a2160008383611deb565b8060026000828254611a33919061283a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a88919061283a565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611aed91906121e0565b60405180910390a3611b0160008383611df0565b5050565b611b88846323b872dd60e01b858585604051602401611b2693929190612e4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611df5565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf590612ef5565b60405180910390fd5b611c0a82600083611deb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8790612f87565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254611ce791906129d4565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d4c91906121e0565b60405180910390a3611d6083600084611df0565b505050565b611de68363a9059cbb60e01b8484604051602401611d849291906127b8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611df5565b505050565b505050565b505050565b6000611e57826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ebc9092919063ffffffff16565b9050600081511115611eb75780806020019051810190611e77919061280d565b611eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ead90613019565b60405180910390fd5b5b505050565b6060611ecb8484600085611ed4565b90509392505050565b606082471015611f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f10906130ab565b60405180910390fd5b611f2285611fe8565b611f61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5890613117565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f8a919061317e565b60006040518083038185875af1925050503d8060008114611fc7576040519150601f19603f3d011682016040523d82523d6000602084013e611fcc565b606091505b5091509150611fdc828286611ffb565b92505050949350505050565b600080823b905060008111915050919050565b6060831561200b5782905061205b565b60008351111561201e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120529190612115565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156120b657808201518184015260208101905061209b565b838111156120c5576000848401525b50505050565b6000601f19601f8301169050919050565b60006120e78261207c565b6120f18185612087565b9350612101818560208601612098565b61210a816120cb565b840191505092915050565b6000602082019050818103600083015261212f81846120dc565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121678261213c565b9050919050565b6121778161215c565b811461218257600080fd5b50565b6000813590506121948161216e565b92915050565b6000602082840312156121b0576121af612137565b5b60006121be84828501612185565b91505092915050565b6000819050919050565b6121da816121c7565b82525050565b60006020820190506121f560008301846121d1565b92915050565b612204816121c7565b811461220f57600080fd5b50565b600081359050612221816121fb565b92915050565b6000806040838503121561223e5761223d612137565b5b600061224c85828601612185565b925050602061225d85828601612212565b9150509250929050565b60008115159050919050565b61227c81612267565b82525050565b60006020820190506122976000830184612273565b92915050565b6000819050919050565b6122b08161229d565b82525050565b60006040820190506122cb60008301856121d1565b6122d860208301846122a7565b9392505050565b60006040820190506122f460008301856121d1565b61230160208301846121d1565b9392505050565b60008060006060848603121561232157612320612137565b5b600061232f86828701612185565b935050602061234086828701612185565b925050604061235186828701612212565b9150509250925092565b6000819050919050565b600061238061237b6123768461213c565b61235b565b61213c565b9050919050565b600061239282612365565b9050919050565b60006123a482612387565b9050919050565b6123b481612399565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b600060ff82169050919050565b6123eb816123d5565b82525050565b600060208201905061240660008301846123e2565b92915050565b60006020828403121561242257612421612137565b5b600061243084828501612212565b91505092915050565b600080604083850312156124505761244f612137565b5b600061245e85828601612185565b925050602061246f85828601612185565b9150509250929050565b6000806000806080858703121561249357612492612137565b5b60006124a187828801612212565b94505060206124b287828801612212565b93505060406124c387828801612185565b92505060606124d487828801612212565b91505092959194509250565b6124e9816121c7565b82525050565b60408201600082015161250560008501826124e0565b50602082015161251860208501826124e0565b50505050565b600060408201905061253360008301846124ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061258057607f821691505b6020821081141561259457612593612539565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006125f6602883612087565b91506126018261259a565b604082019050919050565b60006020820190508181036000830152612625816125e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612666826121c7565b9150612671836121c7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126aa576126a961262c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126ef826121c7565b91506126fa836121c7565b92508261270a576127096126b5565b5b828204905092915050565b60006127208261229d565b915061272b8361229d565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156127665761276561262c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561279e5761279d61262c565b5b828203905092915050565b6127b28161215c565b82525050565b60006040820190506127cd60008301856127a9565b6127da60208301846121d1565b9392505050565b6127ea81612267565b81146127f557600080fd5b50565b600081519050612807816127e1565b92915050565b60006020828403121561282357612822612137565b5b6000612831848285016127f8565b91505092915050565b6000612845826121c7565b9150612850836121c7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128855761288461262c565b5b828201905092915050565b7f564c46493a494e56414c49445f414d4f554e5400000000000000000000000000600082015250565b60006128c6601383612087565b91506128d182612890565b602082019050919050565b600060208201905081810360008301526128f5816128b9565b9050919050565b7f564c46493a494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e600082015250565b6000612932602083612087565b915061293d826128fc565b602082019050919050565b6000602082019050818103600083015261296181612925565b9050919050565b7f564c46493a494e53554646494349454e545f434f4f4c444f574e000000000000600082015250565b600061299e601a83612087565b91506129a982612968565b602082019050919050565b600060208201905081810360008301526129cd81612991565b9050919050565b60006129df826121c7565b91506129ea836121c7565b9250828210156129fd576129fc61262c565b5b828203905092915050565b7f564c46493a554e5354414b455f57494e444f575f46494e495348454400000000600082015250565b6000612a3e601c83612087565b9150612a4982612a08565b602082019050919050565b60006020820190508181036000830152612a6d81612a31565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612ad0602583612087565b9150612adb82612a74565b604082019050919050565b60006020820190508181036000830152612aff81612ac3565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b62602483612087565b9150612b6d82612b06565b604082019050919050565b60006020820190508181036000830152612b9181612b55565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bf4602283612087565b9150612bff82612b98565b604082019050919050565b60006020820190508181036000830152612c2381612be7565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612c86602583612087565b9150612c9182612c2a565b604082019050919050565b60006020820190508181036000830152612cb581612c79565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612d18602383612087565b9150612d2382612cbc565b604082019050919050565b60006020820190508181036000830152612d4781612d0b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612daa602683612087565b9150612db582612d4e565b604082019050919050565b60006020820190508181036000830152612dd981612d9d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612e16601f83612087565b9150612e2182612de0565b602082019050919050565b60006020820190508181036000830152612e4581612e09565b9050919050565b6000606082019050612e6160008301866127a9565b612e6e60208301856127a9565b612e7b60408301846121d1565b949350505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612edf602183612087565b9150612eea82612e83565b604082019050919050565b60006020820190508181036000830152612f0e81612ed2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f71602283612087565b9150612f7c82612f15565b604082019050919050565b60006020820190508181036000830152612fa081612f64565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613003602a83612087565b915061300e82612fa7565b604082019050919050565b6000602082019050818103600083015261303281612ff6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613095602683612087565b91506130a082613039565b604082019050919050565b600060208201905081810360008301526130c481613088565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613101601d83612087565b915061310c826130cb565b602082019050919050565b60006020820190508181036000830152613130816130f4565b9050919050565b600081519050919050565b600081905092915050565b600061315882613137565b6131628185613142565b9350613172818560208601612098565b80840191505092915050565b600061318a828461314d565b91508190509291505056fea26469706673582212202d232e4f79a1dd5051976b0452d5b61421aad025386bd4715269ae42f9864cc264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1215,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "farmInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(FarmInfo)1207_storage"
      },
      {
        "astId": 1217,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)1212_storage)"
      },
      {
        "astId": 1232,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "conversionPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1243,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "stakerRewardsToClaim",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1247,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "stakersCooldowns",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1251,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "userLFIDeposits",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)1212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VLFI.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FarmInfo)1207_storage": {
        "encoding": "inplace",
        "label": "struct VLFI.FarmInfo",
        "members": [
          {
            "astId": 1204,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "accRewardsPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1206,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)1212_storage": {
        "encoding": "inplace",
        "label": "struct VLFI.UserInfo",
        "members": [
          {
            "astId": 1209,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1211,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}