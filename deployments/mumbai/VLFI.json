{
  "address": "0x9e90CCBcBE441b93Bd33AdCc69f4f2EEc3FCfedF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cooldownSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeWindow",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositLFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardsPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userCooldownTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToReceive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "getNextCooldownTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemLFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerRewardsToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakersCooldowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateFarm",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accRewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct VLFI.FarmInfo",
          "name": "farm",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardsToClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLFIDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5352baa50478d4b15d6c1fe28afe485381441b2be1db4f936e868eb88e29661",
  "receipt": {
    "to": null,
    "from": "0xdd8eBa4604D2a9C6c77e4bC557B1884119174726",
    "contractAddress": "0x9e90CCBcBE441b93Bd33AdCc69f4f2EEc3FCfedF",
    "transactionIndex": 13,
    "gasUsed": "3310705",
    "logsBloom": "0x
    "blockHash": "0xc7ff880219ce63ffc6b945ba3d7fd0d93e4d9b778f2ee221e8770f21d78af976",
    "transactionHash": "0xf5352baa50478d4b15d6c1fe28afe485381441b2be1db4f936e868eb88e29661",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 25416241,
        "transactionHash": "0xf5352baa50478d4b15d6c1fe28afe485381441b2be1db4f936e868eb88e29661",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dd8eba4604d2a9c6c77e4bc557b1884119174726",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000136843732c54c00000000000000000000000000000000000000000000000000f1f8a033cb6b1070000000000000000000000000000000000000000000006e00e5852ee3853c5ad0000000000000000000000000000000000000000000000000f0c21bfc98a5c470000000000000000000000000000000000000000000006e00e6bbb31ab801a6d",
        "logIndex": 115,
        "blockHash": "0xc7ff880219ce63ffc6b945ba3d7fd0d93e4d9b778f2ee221e8770f21d78af976"
      }
    ],
    "blockNumber": 25416241,
    "cumulativeGasUsed": "11244235",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "VLFI",
    "VLFI",
    "0x9c4c940205cF972e0B5742c17B3B9a3eAAF87a47",
    300,
    60
  ],
  "solcInputHash": "d662c208ba11befdf2ed38b3054725f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemLFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFarm\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"internalType\":\"struct VLFI.FarmInfo\",\"name\":\"farm\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLFIDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VLFI.sol\":\"VLFI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VLFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract VLFI is ERC20 {\\n\\n    using SafeERC20 for IERC20;\\n\\n    struct FarmInfo {\\n       uint256 accRewardsPerShare;\\n       uint256 lastRewardTime ; // --- \\n    }\\n\\n    struct UserInfo{\\n        uint256 amount;\\n        int256 rewardDebt;\\n    }\\n\\n    FarmInfo public farmInfo;\\n    uint256 public rewardPerSecond;\\n    mapping (address => UserInfo) public userInfo;\\n    \\n\\n    uint256 constant MAX_PRECISION = 18;\\n    uint256 lpTokenPrice = 1000*10**MAX_PRECISION; \\n    IERC20 public immutable STAKED_TOKEN;\\n    uint256 public immutable COOLDOWN_SECONDS;\\n    uint256 public immutable UNSTAKE_WINDOW;\\n    mapping(address => uint256) public stakerRewardsToClaim;\\n    mapping(address => uint256) public stakersCooldowns;\\n    mapping(address => uint256) public userLFIDeposits;\\n    uint256 private constant ACC_REWARD_PRECISION = 1e18;\\n\\n    event Deposited(address indexed from, address indexed onBehalfOf, uint256 amount);\\n    event Redeemed(address indexed from, address indexed to, uint256 amount);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        IERC20 stakedToken,\\n        uint256 cooldownSeconds,\\n        uint256 unstakeWindow\\n    ) ERC20(name,symbol){\\n        STAKED_TOKEN = stakedToken;\\n        COOLDOWN_SECONDS = cooldownSeconds;\\n        UNSTAKE_WINDOW = unstakeWindow;\\n    }\\n\\n    function updateFarm() public returns(FarmInfo memory farm) {\\n        farm = farmInfo;\\n        if(farm.lastRewardTime < block.timestamp) {\\n            uint256 totalSupply = totalSupply();\\n            if(totalSupply > 0) {\\n                uint256 time = block.timestamp - farm.lastRewardTime;\\n                uint256 rewardAmount = time * rewardPerSecond;\\n                farm.accRewardsPerShare += rewardAmount * ACC_REWARD_PRECISION/totalSupply;\\n            }\\n            farm.lastRewardTime = block.timestamp;\\n            farmInfo = farm;\\n        }\\n    }\\n\\n    function pendingReward() public view returns(uint256 pendingRewards) {\\n      FarmInfo memory farm = farmInfo;\\n      UserInfo storage user = userInfo[msg.sender];\\n      uint256 accRewardPerShare = farm.accRewardsPerShare;\\n      uint256 totalSupply = totalSupply();\\n      if(block.timestamp > farm.lastRewardTime && totalSupply != 0) {\\n        uint256 time = block.timestamp - farm.lastRewardTime;\\n        uint256 rewardAmount = time * rewardPerSecond;\\n        accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / totalSupply;\\n      }\\n      pendingRewards = uint256(int256(user.amount * accRewardPerShare / ACC_REWARD_PRECISION) - user.rewardDebt);\\n    }\\n\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public  {\\n        rewardPerSecond = _rewardPerSecond;\\n    }\\n\\n    function createFarm() external {\\n        farmInfo = FarmInfo({\\n            accRewardsPerShare: 0,\\n            lastRewardTime: block.timestamp\\n        });\\n    }\\n\\n    function depositLFI(uint256 amount) external { //LFI\\n        require(amount != 0,\\\"VLFI:INVALID_AMOUNT\\\");\\n        uint256 balanceOfUser = balanceOf(msg.sender);\\n        FarmInfo memory farm = updateFarm();\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.amount += ((amount * 10**18) / lpTokenPrice);\\n        user.rewardDebt += int( ((amount * 10**18) /lpTokenPrice) * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        //stakersCooldowns[msg.sender] = block.timestamp;\\n        stakersCooldowns[msg.sender] = getNextCooldownTimestamp(0, amount, msg.sender, balanceOfUser);\\n        _mint(msg.sender, (amount * 10**18) / lpTokenPrice); \\n        IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposited(msg.sender, msg.sender, amount);\\n    }\\n\\n    function updateRewardsToClaim() external {\\n      uint256 rewards;\\n      stakerRewardsToClaim[msg.sender] = rewards;\\n      \\n    }\\n\\n    function redeemLFI(uint256 amount) external {\\n        require(amount != 0,\\\"VLFI:INVALID_AMOUNT\\\");\\n        uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n        require(\\n            (block.timestamp) > (cooldownStartTimestamp + (COOLDOWN_SECONDS)),\\n            \\\"VLFI:INSUFFICIENT_COOLDOWN\\\"\\n        );\\n        require(\\n            block.timestamp - (cooldownStartTimestamp + (COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n            \\\"VLFI:UNSTAKE_WINDOW_FINISHED\\\"\\n    );\\n        uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n        uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n        FarmInfo memory farm = updateFarm();\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.rewardDebt -= int(((amountToRedeem * 10**18)/lpTokenPrice) * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        user.amount -= (amountToRedeem * 10**18)/lpTokenPrice ;\\n        _burn(msg.sender, (amountToRedeem * 10**18)/lpTokenPrice);\\n        if (balanceOfMessageSender - (amountToRedeem) == 0) {\\n             stakersCooldowns[msg.sender] = 0;\\n        }\\n        IERC20(STAKED_TOKEN).safeTransfer(msg.sender, amountToRedeem);\\n        emit Redeemed(msg.sender,msg.sender,amountToRedeem);\\n    }\\n\\n    function cooldown() external {\\n        require(balanceOf(msg.sender) != 0, \\\"VLFI:INVALID_BALANCE_ON_COOLDOWN\\\");\\n        //solium-disable-next-line\\n        stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    }\\n  // what we are doing on deposit is what needs to happen for both sender and receiver in Transfer also.Do this only if MSG.sender != to\\n    function transfer(address to, uint256 amount) public override returns(bool) {\\n        require(msg.sender != to, \\\"VLFI: INVALID TRANSFER\\\");\\n        require(amount <= balanceOf(msg.sender));\\n        uint256 senderBalance = balanceOf(msg.sender);\\n        uint256 receiverBalance = balanceOf(to);\\n        uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n        require(\\n            (block.timestamp) > (cooldownStartTimestamp + (COOLDOWN_SECONDS)),\\n            \\\"VLFI:INSUFFICIENT_COOLDOWN\\\"\\n        );\\n        require(\\n            block.timestamp - (cooldownStartTimestamp + (COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n            \\\"VLFI:UNSTAKE_WINDOW_FINISHED\\\"\\n        );\\n        \\n         FarmInfo memory farm = updateFarm();\\n         UserInfo storage sender = userInfo[msg.sender];\\n         sender.rewardDebt -= int(((amount * 10**18)/lpTokenPrice) * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n         sender.amount -= (amount * 10**18)/lpTokenPrice ;\\n\\n         UserInfo storage receiver = userInfo[to];\\n         receiver.rewardDebt += int(((amount * 10**18)/lpTokenPrice) * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n         receiver.amount += (amount * 10**18)/lpTokenPrice ;\\n\\n         uint256 previousSenderCooldown = stakersCooldowns[msg.sender];\\n         stakersCooldowns[to] = getNextCooldownTimestamp(\\n            previousSenderCooldown,\\n            amount,\\n            to,\\n            receiverBalance\\n          );\\n          // If cooldown was set and whole balance of sender was trnasferred - clear cooldown\\n          if(senderBalance == amount && previousSenderCooldown != 0) {\\n            stakersCooldowns[msg.sender] = 0;\\n          }\\n        \\n       _transfer(msg.sender,to,amount);\\n       return true;\\n    }\\n\\n    function claimRewards() external {\\n        FarmInfo memory farm = updateFarm();\\n        UserInfo storage user = userInfo[msg.sender];  \\n        int accumulatedReward = int(user.amount * farm.accRewardsPerShare / ACC_REWARD_PRECISION);\\n        uint _pendingReward = uint(accumulatedReward - user.rewardDebt);\\n        user.rewardDebt = accumulatedReward; //check for the reward debt again.\\n        IERC20(STAKED_TOKEN).transfer(msg.sender, _pendingReward);\\n  }\\n\\n    function getNextCooldownTimestamp(\\n    uint256 userCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      ((block.timestamp - COOLDOWN_SECONDS) - (UNSTAKE_WINDOW));\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > userCooldownTimestamp)\\n          ? block.timestamp\\n          : userCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive * (fromCooldownTimestamp) + (toBalance * (toCooldownTimestamp))\\n        ) / (amountToReceive + (toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n}\",\"keccak256\":\"0xeaa6c72c6f7f6afd4590c86eabc3b38111e376b2ca187d408629e651705b8737\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526012600a6200001491906200031b565b6103e86200002391906200036c565b6009553480156200003357600080fd5b506040516200413338038062004133833981810160405281019062000059919062000614565b8484816003908051906020019062000073929190620000de565b5080600490805190602001906200008c929190620000de565b5050508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508160a081815250508060c0818152505050505050506200073f565b828054620000ec9062000709565b90600052602060002090601f0160209004810192826200011057600085556200015c565b82601f106200012b57805160ff19168380011785556200015c565b828001600101855582156200015c579182015b828111156200015b5782518255916020019190600101906200013e565b5b5090506200016b91906200016f565b5090565b5b808211156200018a57600081600090555060010162000170565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200021c57808604811115620001f457620001f36200018e565b5b6001851615620002045780820291505b80810290506200021485620001bd565b9450620001d4565b94509492505050565b6000826200023757600190506200030a565b816200024757600090506200030a565b81600181146200026057600281146200026b57620002a1565b60019150506200030a565b60ff84111562000280576200027f6200018e565b5b8360020a9150848211156200029a57620002996200018e565b5b506200030a565b5060208310610133831016604e8410600b8410161715620002db5782820a905083811115620002d557620002d46200018e565b5b6200030a565b620002ea8484846001620001ca565b925090508184048111156200030457620003036200018e565b5b81810290505b9392505050565b6000819050919050565b6000620003288262000311565b9150620003358362000311565b9250620003647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000225565b905092915050565b6000620003798262000311565b9150620003868362000311565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620003c257620003c16200018e565b5b828202905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043682620003eb565b810181811067ffffffffffffffff82111715620004585762000457620003fc565b5b80604052505050565b60006200046d620003cd565b90506200047b82826200042b565b919050565b600067ffffffffffffffff8211156200049e576200049d620003fc565b5b620004a982620003eb565b9050602081019050919050565b60005b83811015620004d6578082015181840152602081019050620004b9565b83811115620004e6576000848401525b50505050565b600062000503620004fd8462000480565b62000461565b905082815260208101848484011115620005225762000521620003e6565b5b6200052f848285620004b6565b509392505050565b600082601f8301126200054f576200054e620003e1565b5b815162000561848260208601620004ec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000597826200056a565b9050919050565b6000620005ab826200058a565b9050919050565b620005bd816200059e565b8114620005c957600080fd5b50565b600081519050620005dd81620005b2565b92915050565b620005ee8162000311565b8114620005fa57600080fd5b50565b6000815190506200060e81620005e3565b92915050565b600080600080600060a08688031215620006335762000632620003d7565b5b600086015167ffffffffffffffff811115620006545762000653620003dc565b5b620006628882890162000537565b955050602086015167ffffffffffffffff811115620006865762000685620003dc565b5b620006948882890162000537565b9450506040620006a788828901620005cc565b9350506060620006ba88828901620005fd565b9250506080620006cd88828901620005fd565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072257607f821691505b60208210811415620007395762000738620006da565b5b50919050565b60805160a05160c051613977620007bc600039600081816109b7015281816110f20152818161160a0152611a50015260008181610e9701528181611085015281816111130152818161159d0152818161162b0152611a7101526000818161098a01528181610a7201528181610d7b015261131b01526139776000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80634e253ad0116101045780638f10369a116100a2578063a9059cbb11610071578063a9059cbb14610539578063dd62ed3e14610569578063f1cc432a14610599578063f54ca63c146105c9576101da565b80638f10369a146104b157806395d89b41146104cf5780639f1d2ffa146104ed578063a457c2d714610509576101da565b806370a08231116100de57806370a082311461042957806372b49d6314610459578063787a08a6146104775780637e90d7ef14610481576101da565b80634e253ad0146103c157806366da5815146103dd5780636fbc92a2146103f9576101da565b80631d49d66c1161017c578063313ce5671161014b578063313ce5671461034b578063359c4a9614610369578063372500ab146103875780633950935114610391576101da565b80631d49d66c146102d45780631d5ec3cb146102f357806323b872dd146102fd578063312f6b831461032d576101da565b80630e5b47bc116101b85780630e5b47bc1461025d578063137ee36e1461026757806318160ddd146102855780631959a002146102a3576101da565b806306fdde03146101df578063091030c3146101fd578063095ea7b31461022d575b600080fd5b6101e76105e7565b6040516101f491906127c1565b60405180910390f35b61021760048036038101906102129190612846565b610679565b604051610224919061288c565b60405180910390f35b610247600480360381019061024291906128d3565b610691565b604051610254919061292e565b60405180910390f35b6102656106af565b005b61026f6106f8565b60405161027c919061288c565b60405180910390f35b61028d61081f565b60405161029a919061288c565b60405180910390f35b6102bd60048036038101906102b89190612846565b610829565b6040516102cb929190612962565b60405180910390f35b6102dc61084d565b6040516102ea92919061298b565b60405180910390f35b6102fb61085f565b005b610317600480360381019061031291906129b4565b610890565b604051610324919061292e565b60405180910390f35b610335610988565b6040516103429190612a66565b60405180910390f35b6103536109ac565b6040516103609190612a9d565b60405180910390f35b6103716109b5565b60405161037e919061288c565b60405180910390f35b61038f6109d9565b005b6103ab60048036038101906103a691906128d3565b610b15565b6040516103b8919061292e565b60405180910390f35b6103db60048036038101906103d69190612ab8565b610bc1565b005b6103f760048036038101906103f29190612ab8565b610e2b565b005b610413600480360381019061040e9190612846565b610e35565b604051610420919061288c565b60405180910390f35b610443600480360381019061043e9190612846565b610e4d565b604051610450919061288c565b60405180910390f35b610461610e95565b60405161046e919061288c565b60405180910390f35b61047f610eb9565b005b61049b60048036038101906104969190612846565b610f4b565b6040516104a8919061288c565b60405180910390f35b6104b9610f63565b6040516104c6919061288c565b60405180910390f35b6104d7610f69565b6040516104e491906127c1565b60405180910390f35b61050760048036038101906105029190612ab8565b610ffb565b005b610523600480360381019061051e91906128d3565b6113cc565b604051610530919061292e565b60405180910390f35b610553600480360381019061054e91906128d3565b6114b7565b604051610560919061292e565b60405180910390f35b610583600480360381019061057e9190612ae5565b61196d565b604051610590919061288c565b60405180910390f35b6105b360048036038101906105ae9190612b25565b6119f4565b6040516105c0919061288c565b60405180910390f35b6105d1611b28565b6040516105de9190612bca565b60405180910390f35b6060600380546105f690612c14565b80601f016020809104026020016040519081016040528092919081815260200182805461062290612c14565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b5050505050905090565b600b6020528060005260406000206000915090505481565b60006106a561069e611bfd565b8484611c05565b6001905092915050565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008060056040518060400160405290816000820154815260200160018201548152505090506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600001519050600061077461081f565b905083602001514211801561078a575060008114155b156107e45760008460200151426107a19190612c75565b90506000600754826107b39190612ca9565b905082670de0b6b3a7640000826107ca9190612ca9565b6107d49190612d32565b846107df9190612d63565b935050505b8260010154670de0b6b3a76400008385600001546108029190612ca9565b61080c9190612d32565b6108169190612db9565b94505050505090565b6000600254905090565b60086020528060005260406000206000915090508060000154908060010154905082565b60058060000154908060010154905082565b6040518060400160405280600081526020014281525060056000820151816000015560208201518160010155905050565b600061089d848484611dd0565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006108e8611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90612ebf565b60405180910390fd5b61097c85610974611bfd565b858403611c05565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109e3611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000670de0b6b3a764000083600001518360000154610a479190612ca9565b610a519190612d32565b90506000826001015482610a659190612db9565b90508183600101819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610acb929190612eee565b6020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190612f43565b5050505050565b6000610bb7610b22611bfd565b848460016000610b30611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb29190612d63565b611c05565b6001905092915050565b6000811415610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc90612fbc565b60405180910390fd5b6000610c1033610e4d565b90506000610c1c611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600954670de0b6b3a764000085610c789190612ca9565b610c829190612d32565b816000016000828254610c959190612d63565b92505081905550670de0b6b3a76400008260000151600954670de0b6b3a764000087610cc19190612ca9565b610ccb9190612d32565b610cd59190612ca9565b610cdf9190612d32565b816001016000828254610cf29190612fdc565b92505081905550610d0660008533866119f4565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d7333600954670de0b6b3a764000087610d649190612ca9565b610d6e9190612d32565b612051565b610dc03330867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166121b1909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a786604051610e1d919061288c565b60405180910390a350505050565b8060078190555050565b600c6020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610ec433610e4d565b1415610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc906130bc565b60405180910390fd5b42600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600a6020528060005260406000206000915090505481565b60075481565b606060048054610f7890612c14565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa490612c14565b8015610ff15780601f10610fc657610100808354040283529160200191610ff1565b820191906000526020600020905b815481529060010190602001808311610fd457829003601f168201915b5050505050905090565b600081141561103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690612fbc565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f0000000000000000000000000000000000000000000000000000000000000000816110af9190612d63565b42116110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790613128565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008261113d9190612d63565b426111489190612c75565b1115611189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118090613194565b60405180910390fd5b600061119433610e4d565b905060008184116111a557836111a7565b815b905060006111b3611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008260000151600954670de0b6b3a76400008661121d9190612ca9565b6112279190612d32565b6112319190612ca9565b61123b9190612d32565b81600101600082825461124e9190612db9565b92505081905550600954670de0b6b3a76400008461126c9190612ca9565b6112769190612d32565b8160000160008282546112899190612c75565b925050819055506112ba33600954670de0b6b3a7640000866112ab9190612ca9565b6112b59190612d32565b61223a565b600083856112c89190612c75565b1415611314576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61135f33847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124119092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc856040516113bc919061288c565b60405180910390a3505050505050565b600080600160006113db611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f90613226565b60405180910390fd5b6114ac6114a3611bfd565b85858403611c05565b600191505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151f90613292565b60405180910390fd5b61153133610e4d565b82111561153d57600080fd5b600061154833610e4d565b9050600061155585610e4d565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f0000000000000000000000000000000000000000000000000000000000000000816115c79190612d63565b4211611608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ff90613128565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000826116559190612d63565b426116609190612c75565b11156116a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169890613194565b60405180910390fd5b60006116ab611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008260000151600954670de0b6b3a76400008a6117159190612ca9565b61171f9190612d32565b6117299190612ca9565b6117339190612d32565b8160010160008282546117469190612db9565b92505081905550600954670de0b6b3a7640000886117649190612ca9565b61176e9190612d32565b8160000160008282546117819190612c75565b925050819055506000600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008360000151600954670de0b6b3a76400008b6117f09190612ca9565b6117fa9190612d32565b6118049190612ca9565b61180e9190612d32565b8160010160008282546118219190612fdc565b92505081905550600954670de0b6b3a76400008961183f9190612ca9565b6118499190612d32565b81600001600082825461185c9190612d63565b925050819055506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506118b3818a8c896119f4565b600b60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508887148015611906575060008114155b15611951576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61195c338b8b611dd0565b600197505050505050505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611a4c576000915050611b20565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000042611a9b9190612c75565b611aa59190612c75565b905081811115611ab85760009150611b1a565b6000878211611ac75787611ac9565b425b905082811015611ade57829350505050611b20565b8487611aea9190612d63565b8386611af69190612ca9565b8289611b029190612ca9565b611b0c9190612d63565b611b169190612d32565b9250505b81925050505b949350505050565b611b3061270e565b60056040518060400160405290816000820154815260200160018201548152505090504281602001511015611bfa576000611b6961081f565b90506000811115611bd4576000826020015142611b869190612c75565b9050600060075482611b989190612ca9565b905082670de0b6b3a764000082611baf9190612ca9565b611bb99190612d32565b84600001818151611bca9190612d63565b9150818152505050505b428260200181815250508160056000820151816000015560208201518160010155905050505b90565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c90613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ce5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdc906133b6565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611dc3919061288c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3790613448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea7906134da565b60405180910390fd5b611ebb838383612497565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f389061356c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fd49190612d63565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612038919061288c565b60405180910390a361204b84848461249c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b8906135d8565b60405180910390fd5b6120cd60008383612497565b80600260008282546120df9190612d63565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121349190612d63565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612199919061288c565b60405180910390a36121ad6000838361249c565b5050565b612234846323b872dd60e01b8585856040516024016121d2939291906135f8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124a1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a1906136a1565b60405180910390fd5b6122b682600083612497565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561233c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233390613733565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546123939190612c75565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123f8919061288c565b60405180910390a361240c8360008461249c565b505050565b6124928363a9059cbb60e01b8484604051602401612430929190612eee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124a1565b505050565b505050565b505050565b6000612503826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125689092919063ffffffff16565b905060008151111561256357808060200190518101906125239190612f43565b612562576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612559906137c5565b60405180910390fd5b5b505050565b60606125778484600085612580565b90509392505050565b6060824710156125c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bc90613857565b60405180910390fd5b6125ce85612694565b61260d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612604906138c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612636919061392a565b60006040518083038185875af1925050503d8060008114612673576040519150601f19603f3d011682016040523d82523d6000602084013e612678565b606091505b50915091506126888282866126a7565b92505050949350505050565b600080823b905060008111915050919050565b606083156126b757829050612707565b6000835111156126ca5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe91906127c1565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612762578082015181840152602081019050612747565b83811115612771576000848401525b50505050565b6000601f19601f8301169050919050565b600061279382612728565b61279d8185612733565b93506127ad818560208601612744565b6127b681612777565b840191505092915050565b600060208201905081810360008301526127db8184612788565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612813826127e8565b9050919050565b61282381612808565b811461282e57600080fd5b50565b6000813590506128408161281a565b92915050565b60006020828403121561285c5761285b6127e3565b5b600061286a84828501612831565b91505092915050565b6000819050919050565b61288681612873565b82525050565b60006020820190506128a1600083018461287d565b92915050565b6128b081612873565b81146128bb57600080fd5b50565b6000813590506128cd816128a7565b92915050565b600080604083850312156128ea576128e96127e3565b5b60006128f885828601612831565b9250506020612909858286016128be565b9150509250929050565b60008115159050919050565b61292881612913565b82525050565b6000602082019050612943600083018461291f565b92915050565b6000819050919050565b61295c81612949565b82525050565b6000604082019050612977600083018561287d565b6129846020830184612953565b9392505050565b60006040820190506129a0600083018561287d565b6129ad602083018461287d565b9392505050565b6000806000606084860312156129cd576129cc6127e3565b5b60006129db86828701612831565b93505060206129ec86828701612831565b92505060406129fd868287016128be565b9150509250925092565b6000819050919050565b6000612a2c612a27612a22846127e8565b612a07565b6127e8565b9050919050565b6000612a3e82612a11565b9050919050565b6000612a5082612a33565b9050919050565b612a6081612a45565b82525050565b6000602082019050612a7b6000830184612a57565b92915050565b600060ff82169050919050565b612a9781612a81565b82525050565b6000602082019050612ab26000830184612a8e565b92915050565b600060208284031215612ace57612acd6127e3565b5b6000612adc848285016128be565b91505092915050565b60008060408385031215612afc57612afb6127e3565b5b6000612b0a85828601612831565b9250506020612b1b85828601612831565b9150509250929050565b60008060008060808587031215612b3f57612b3e6127e3565b5b6000612b4d878288016128be565b9450506020612b5e878288016128be565b9350506040612b6f87828801612831565b9250506060612b80878288016128be565b91505092959194509250565b612b9581612873565b82525050565b604082016000820151612bb16000850182612b8c565b506020820151612bc46020850182612b8c565b50505050565b6000604082019050612bdf6000830184612b9b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2c57607f821691505b60208210811415612c4057612c3f612be5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8082612873565b9150612c8b83612873565b925082821015612c9e57612c9d612c46565b5b828203905092915050565b6000612cb482612873565b9150612cbf83612873565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cf857612cf7612c46565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d3d82612873565b9150612d4883612873565b925082612d5857612d57612d03565b5b828204905092915050565b6000612d6e82612873565b9150612d7983612873565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612dae57612dad612c46565b5b828201905092915050565b6000612dc482612949565b9150612dcf83612949565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615612e0a57612e09612c46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612e4257612e41612c46565b5b828203905092915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000612ea9602883612733565b9150612eb482612e4d565b604082019050919050565b60006020820190508181036000830152612ed881612e9c565b9050919050565b612ee881612808565b82525050565b6000604082019050612f036000830185612edf565b612f10602083018461287d565b9392505050565b612f2081612913565b8114612f2b57600080fd5b50565b600081519050612f3d81612f17565b92915050565b600060208284031215612f5957612f586127e3565b5b6000612f6784828501612f2e565b91505092915050565b7f564c46493a494e56414c49445f414d4f554e5400000000000000000000000000600082015250565b6000612fa6601383612733565b9150612fb182612f70565b602082019050919050565b60006020820190508181036000830152612fd581612f99565b9050919050565b6000612fe782612949565b9150612ff283612949565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561302d5761302c612c46565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561306557613064612c46565b5b828201905092915050565b7f564c46493a494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e600082015250565b60006130a6602083612733565b91506130b182613070565b602082019050919050565b600060208201905081810360008301526130d581613099565b9050919050565b7f564c46493a494e53554646494349454e545f434f4f4c444f574e000000000000600082015250565b6000613112601a83612733565b915061311d826130dc565b602082019050919050565b6000602082019050818103600083015261314181613105565b9050919050565b7f564c46493a554e5354414b455f57494e444f575f46494e495348454400000000600082015250565b600061317e601c83612733565b915061318982613148565b602082019050919050565b600060208201905081810360008301526131ad81613171565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613210602583612733565b915061321b826131b4565b604082019050919050565b6000602082019050818103600083015261323f81613203565b9050919050565b7f564c46493a20494e56414c4944205452414e5346455200000000000000000000600082015250565b600061327c601683612733565b915061328782613246565b602082019050919050565b600060208201905081810360008301526132ab8161326f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061330e602483612733565b9150613319826132b2565b604082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006133a0602283612733565b91506133ab82613344565b604082019050919050565b600060208201905081810360008301526133cf81613393565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613432602583612733565b915061343d826133d6565b604082019050919050565b6000602082019050818103600083015261346181613425565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006134c4602383612733565b91506134cf82613468565b604082019050919050565b600060208201905081810360008301526134f3816134b7565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613556602683612733565b9150613561826134fa565b604082019050919050565b6000602082019050818103600083015261358581613549565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006135c2601f83612733565b91506135cd8261358c565b602082019050919050565b600060208201905081810360008301526135f1816135b5565b9050919050565b600060608201905061360d6000830186612edf565b61361a6020830185612edf565b613627604083018461287d565b949350505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061368b602183612733565b91506136968261362f565b604082019050919050565b600060208201905081810360008301526136ba8161367e565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061371d602283612733565b9150613728826136c1565b604082019050919050565b6000602082019050818103600083015261374c81613710565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006137af602a83612733565b91506137ba82613753565b604082019050919050565b600060208201905081810360008301526137de816137a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613841602683612733565b915061384c826137e5565b604082019050919050565b6000602082019050818103600083015261387081613834565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006138ad601d83612733565b91506138b882613877565b602082019050919050565b600060208201905081810360008301526138dc816138a0565b9050919050565b600081519050919050565b600081905092915050565b6000613904826138e3565b61390e81856138ee565b935061391e818560208601612744565b80840191505092915050565b600061393682846138f9565b91508190509291505056fea2646970667358221220e9e4e53b9f8992c33f7e8b6fe6edfea25181684ece93364e8ac6078350e99d9064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80634e253ad0116101045780638f10369a116100a2578063a9059cbb11610071578063a9059cbb14610539578063dd62ed3e14610569578063f1cc432a14610599578063f54ca63c146105c9576101da565b80638f10369a146104b157806395d89b41146104cf5780639f1d2ffa146104ed578063a457c2d714610509576101da565b806370a08231116100de57806370a082311461042957806372b49d6314610459578063787a08a6146104775780637e90d7ef14610481576101da565b80634e253ad0146103c157806366da5815146103dd5780636fbc92a2146103f9576101da565b80631d49d66c1161017c578063313ce5671161014b578063313ce5671461034b578063359c4a9614610369578063372500ab146103875780633950935114610391576101da565b80631d49d66c146102d45780631d5ec3cb146102f357806323b872dd146102fd578063312f6b831461032d576101da565b80630e5b47bc116101b85780630e5b47bc1461025d578063137ee36e1461026757806318160ddd146102855780631959a002146102a3576101da565b806306fdde03146101df578063091030c3146101fd578063095ea7b31461022d575b600080fd5b6101e76105e7565b6040516101f491906127c1565b60405180910390f35b61021760048036038101906102129190612846565b610679565b604051610224919061288c565b60405180910390f35b610247600480360381019061024291906128d3565b610691565b604051610254919061292e565b60405180910390f35b6102656106af565b005b61026f6106f8565b60405161027c919061288c565b60405180910390f35b61028d61081f565b60405161029a919061288c565b60405180910390f35b6102bd60048036038101906102b89190612846565b610829565b6040516102cb929190612962565b60405180910390f35b6102dc61084d565b6040516102ea92919061298b565b60405180910390f35b6102fb61085f565b005b610317600480360381019061031291906129b4565b610890565b604051610324919061292e565b60405180910390f35b610335610988565b6040516103429190612a66565b60405180910390f35b6103536109ac565b6040516103609190612a9d565b60405180910390f35b6103716109b5565b60405161037e919061288c565b60405180910390f35b61038f6109d9565b005b6103ab60048036038101906103a691906128d3565b610b15565b6040516103b8919061292e565b60405180910390f35b6103db60048036038101906103d69190612ab8565b610bc1565b005b6103f760048036038101906103f29190612ab8565b610e2b565b005b610413600480360381019061040e9190612846565b610e35565b604051610420919061288c565b60405180910390f35b610443600480360381019061043e9190612846565b610e4d565b604051610450919061288c565b60405180910390f35b610461610e95565b60405161046e919061288c565b60405180910390f35b61047f610eb9565b005b61049b60048036038101906104969190612846565b610f4b565b6040516104a8919061288c565b60405180910390f35b6104b9610f63565b6040516104c6919061288c565b60405180910390f35b6104d7610f69565b6040516104e491906127c1565b60405180910390f35b61050760048036038101906105029190612ab8565b610ffb565b005b610523600480360381019061051e91906128d3565b6113cc565b604051610530919061292e565b60405180910390f35b610553600480360381019061054e91906128d3565b6114b7565b604051610560919061292e565b60405180910390f35b610583600480360381019061057e9190612ae5565b61196d565b604051610590919061288c565b60405180910390f35b6105b360048036038101906105ae9190612b25565b6119f4565b6040516105c0919061288c565b60405180910390f35b6105d1611b28565b6040516105de9190612bca565b60405180910390f35b6060600380546105f690612c14565b80601f016020809104026020016040519081016040528092919081815260200182805461062290612c14565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b5050505050905090565b600b6020528060005260406000206000915090505481565b60006106a561069e611bfd565b8484611c05565b6001905092915050565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008060056040518060400160405290816000820154815260200160018201548152505090506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600001519050600061077461081f565b905083602001514211801561078a575060008114155b156107e45760008460200151426107a19190612c75565b90506000600754826107b39190612ca9565b905082670de0b6b3a7640000826107ca9190612ca9565b6107d49190612d32565b846107df9190612d63565b935050505b8260010154670de0b6b3a76400008385600001546108029190612ca9565b61080c9190612d32565b6108169190612db9565b94505050505090565b6000600254905090565b60086020528060005260406000206000915090508060000154908060010154905082565b60058060000154908060010154905082565b6040518060400160405280600081526020014281525060056000820151816000015560208201518160010155905050565b600061089d848484611dd0565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006108e8611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90612ebf565b60405180910390fd5b61097c85610974611bfd565b858403611c05565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109e3611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000670de0b6b3a764000083600001518360000154610a479190612ca9565b610a519190612d32565b90506000826001015482610a659190612db9565b90508183600101819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610acb929190612eee565b6020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190612f43565b5050505050565b6000610bb7610b22611bfd565b848460016000610b30611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb29190612d63565b611c05565b6001905092915050565b6000811415610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc90612fbc565b60405180910390fd5b6000610c1033610e4d565b90506000610c1c611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600954670de0b6b3a764000085610c789190612ca9565b610c829190612d32565b816000016000828254610c959190612d63565b92505081905550670de0b6b3a76400008260000151600954670de0b6b3a764000087610cc19190612ca9565b610ccb9190612d32565b610cd59190612ca9565b610cdf9190612d32565b816001016000828254610cf29190612fdc565b92505081905550610d0660008533866119f4565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d7333600954670de0b6b3a764000087610d649190612ca9565b610d6e9190612d32565b612051565b610dc03330867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166121b1909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a786604051610e1d919061288c565b60405180910390a350505050565b8060078190555050565b600c6020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610ec433610e4d565b1415610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc906130bc565b60405180910390fd5b42600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600a6020528060005260406000206000915090505481565b60075481565b606060048054610f7890612c14565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa490612c14565b8015610ff15780601f10610fc657610100808354040283529160200191610ff1565b820191906000526020600020905b815481529060010190602001808311610fd457829003601f168201915b5050505050905090565b600081141561103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690612fbc565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f0000000000000000000000000000000000000000000000000000000000000000816110af9190612d63565b42116110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790613128565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008261113d9190612d63565b426111489190612c75565b1115611189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118090613194565b60405180910390fd5b600061119433610e4d565b905060008184116111a557836111a7565b815b905060006111b3611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008260000151600954670de0b6b3a76400008661121d9190612ca9565b6112279190612d32565b6112319190612ca9565b61123b9190612d32565b81600101600082825461124e9190612db9565b92505081905550600954670de0b6b3a76400008461126c9190612ca9565b6112769190612d32565b8160000160008282546112899190612c75565b925050819055506112ba33600954670de0b6b3a7640000866112ab9190612ca9565b6112b59190612d32565b61223a565b600083856112c89190612c75565b1415611314576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61135f33847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124119092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc856040516113bc919061288c565b60405180910390a3505050505050565b600080600160006113db611bfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f90613226565b60405180910390fd5b6114ac6114a3611bfd565b85858403611c05565b600191505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151f90613292565b60405180910390fd5b61153133610e4d565b82111561153d57600080fd5b600061154833610e4d565b9050600061155585610e4d565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f0000000000000000000000000000000000000000000000000000000000000000816115c79190612d63565b4211611608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ff90613128565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000826116559190612d63565b426116609190612c75565b11156116a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169890613194565b60405180910390fd5b60006116ab611b28565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008260000151600954670de0b6b3a76400008a6117159190612ca9565b61171f9190612d32565b6117299190612ca9565b6117339190612d32565b8160010160008282546117469190612db9565b92505081905550600954670de0b6b3a7640000886117649190612ca9565b61176e9190612d32565b8160000160008282546117819190612c75565b925050819055506000600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a76400008360000151600954670de0b6b3a76400008b6117f09190612ca9565b6117fa9190612d32565b6118049190612ca9565b61180e9190612d32565b8160010160008282546118219190612fdc565b92505081905550600954670de0b6b3a76400008961183f9190612ca9565b6118499190612d32565b81600001600082825461185c9190612d63565b925050819055506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506118b3818a8c896119f4565b600b60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508887148015611906575060008114155b15611951576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61195c338b8b611dd0565b600197505050505050505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611a4c576000915050611b20565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000042611a9b9190612c75565b611aa59190612c75565b905081811115611ab85760009150611b1a565b6000878211611ac75787611ac9565b425b905082811015611ade57829350505050611b20565b8487611aea9190612d63565b8386611af69190612ca9565b8289611b029190612ca9565b611b0c9190612d63565b611b169190612d32565b9250505b81925050505b949350505050565b611b3061270e565b60056040518060400160405290816000820154815260200160018201548152505090504281602001511015611bfa576000611b6961081f565b90506000811115611bd4576000826020015142611b869190612c75565b9050600060075482611b989190612ca9565b905082670de0b6b3a764000082611baf9190612ca9565b611bb99190612d32565b84600001818151611bca9190612d63565b9150818152505050505b428260200181815250508160056000820151816000015560208201518160010155905050505b90565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c90613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ce5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdc906133b6565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611dc3919061288c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3790613448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea7906134da565b60405180910390fd5b611ebb838383612497565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f389061356c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fd49190612d63565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612038919061288c565b60405180910390a361204b84848461249c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b8906135d8565b60405180910390fd5b6120cd60008383612497565b80600260008282546120df9190612d63565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121349190612d63565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612199919061288c565b60405180910390a36121ad6000838361249c565b5050565b612234846323b872dd60e01b8585856040516024016121d2939291906135f8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124a1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a1906136a1565b60405180910390fd5b6122b682600083612497565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561233c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233390613733565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546123939190612c75565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123f8919061288c565b60405180910390a361240c8360008461249c565b505050565b6124928363a9059cbb60e01b8484604051602401612430929190612eee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124a1565b505050565b505050565b505050565b6000612503826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125689092919063ffffffff16565b905060008151111561256357808060200190518101906125239190612f43565b612562576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612559906137c5565b60405180910390fd5b5b505050565b60606125778484600085612580565b90509392505050565b6060824710156125c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bc90613857565b60405180910390fd5b6125ce85612694565b61260d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612604906138c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612636919061392a565b60006040518083038185875af1925050503d8060008114612673576040519150601f19603f3d011682016040523d82523d6000602084013e612678565b606091505b50915091506126888282866126a7565b92505050949350505050565b600080823b905060008111915050919050565b606083156126b757829050612707565b6000835111156126ca5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe91906127c1565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612762578082015181840152602081019050612747565b83811115612771576000848401525b50505050565b6000601f19601f8301169050919050565b600061279382612728565b61279d8185612733565b93506127ad818560208601612744565b6127b681612777565b840191505092915050565b600060208201905081810360008301526127db8184612788565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612813826127e8565b9050919050565b61282381612808565b811461282e57600080fd5b50565b6000813590506128408161281a565b92915050565b60006020828403121561285c5761285b6127e3565b5b600061286a84828501612831565b91505092915050565b6000819050919050565b61288681612873565b82525050565b60006020820190506128a1600083018461287d565b92915050565b6128b081612873565b81146128bb57600080fd5b50565b6000813590506128cd816128a7565b92915050565b600080604083850312156128ea576128e96127e3565b5b60006128f885828601612831565b9250506020612909858286016128be565b9150509250929050565b60008115159050919050565b61292881612913565b82525050565b6000602082019050612943600083018461291f565b92915050565b6000819050919050565b61295c81612949565b82525050565b6000604082019050612977600083018561287d565b6129846020830184612953565b9392505050565b60006040820190506129a0600083018561287d565b6129ad602083018461287d565b9392505050565b6000806000606084860312156129cd576129cc6127e3565b5b60006129db86828701612831565b93505060206129ec86828701612831565b92505060406129fd868287016128be565b9150509250925092565b6000819050919050565b6000612a2c612a27612a22846127e8565b612a07565b6127e8565b9050919050565b6000612a3e82612a11565b9050919050565b6000612a5082612a33565b9050919050565b612a6081612a45565b82525050565b6000602082019050612a7b6000830184612a57565b92915050565b600060ff82169050919050565b612a9781612a81565b82525050565b6000602082019050612ab26000830184612a8e565b92915050565b600060208284031215612ace57612acd6127e3565b5b6000612adc848285016128be565b91505092915050565b60008060408385031215612afc57612afb6127e3565b5b6000612b0a85828601612831565b9250506020612b1b85828601612831565b9150509250929050565b60008060008060808587031215612b3f57612b3e6127e3565b5b6000612b4d878288016128be565b9450506020612b5e878288016128be565b9350506040612b6f87828801612831565b9250506060612b80878288016128be565b91505092959194509250565b612b9581612873565b82525050565b604082016000820151612bb16000850182612b8c565b506020820151612bc46020850182612b8c565b50505050565b6000604082019050612bdf6000830184612b9b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2c57607f821691505b60208210811415612c4057612c3f612be5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8082612873565b9150612c8b83612873565b925082821015612c9e57612c9d612c46565b5b828203905092915050565b6000612cb482612873565b9150612cbf83612873565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cf857612cf7612c46565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d3d82612873565b9150612d4883612873565b925082612d5857612d57612d03565b5b828204905092915050565b6000612d6e82612873565b9150612d7983612873565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612dae57612dad612c46565b5b828201905092915050565b6000612dc482612949565b9150612dcf83612949565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615612e0a57612e09612c46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612e4257612e41612c46565b5b828203905092915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000612ea9602883612733565b9150612eb482612e4d565b604082019050919050565b60006020820190508181036000830152612ed881612e9c565b9050919050565b612ee881612808565b82525050565b6000604082019050612f036000830185612edf565b612f10602083018461287d565b9392505050565b612f2081612913565b8114612f2b57600080fd5b50565b600081519050612f3d81612f17565b92915050565b600060208284031215612f5957612f586127e3565b5b6000612f6784828501612f2e565b91505092915050565b7f564c46493a494e56414c49445f414d4f554e5400000000000000000000000000600082015250565b6000612fa6601383612733565b9150612fb182612f70565b602082019050919050565b60006020820190508181036000830152612fd581612f99565b9050919050565b6000612fe782612949565b9150612ff283612949565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561302d5761302c612c46565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561306557613064612c46565b5b828201905092915050565b7f564c46493a494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e600082015250565b60006130a6602083612733565b91506130b182613070565b602082019050919050565b600060208201905081810360008301526130d581613099565b9050919050565b7f564c46493a494e53554646494349454e545f434f4f4c444f574e000000000000600082015250565b6000613112601a83612733565b915061311d826130dc565b602082019050919050565b6000602082019050818103600083015261314181613105565b9050919050565b7f564c46493a554e5354414b455f57494e444f575f46494e495348454400000000600082015250565b600061317e601c83612733565b915061318982613148565b602082019050919050565b600060208201905081810360008301526131ad81613171565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613210602583612733565b915061321b826131b4565b604082019050919050565b6000602082019050818103600083015261323f81613203565b9050919050565b7f564c46493a20494e56414c4944205452414e5346455200000000000000000000600082015250565b600061327c601683612733565b915061328782613246565b602082019050919050565b600060208201905081810360008301526132ab8161326f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061330e602483612733565b9150613319826132b2565b604082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006133a0602283612733565b91506133ab82613344565b604082019050919050565b600060208201905081810360008301526133cf81613393565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613432602583612733565b915061343d826133d6565b604082019050919050565b6000602082019050818103600083015261346181613425565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006134c4602383612733565b91506134cf82613468565b604082019050919050565b600060208201905081810360008301526134f3816134b7565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613556602683612733565b9150613561826134fa565b604082019050919050565b6000602082019050818103600083015261358581613549565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006135c2601f83612733565b91506135cd8261358c565b602082019050919050565b600060208201905081810360008301526135f1816135b5565b9050919050565b600060608201905061360d6000830186612edf565b61361a6020830185612edf565b613627604083018461287d565b949350505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061368b602183612733565b91506136968261362f565b604082019050919050565b600060208201905081810360008301526136ba8161367e565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061371d602283612733565b9150613728826136c1565b604082019050919050565b6000602082019050818103600083015261374c81613710565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006137af602a83612733565b91506137ba82613753565b604082019050919050565b600060208201905081810360008301526137de816137a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613841602683612733565b915061384c826137e5565b604082019050919050565b6000602082019050818103600083015261387081613834565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006138ad601d83612733565b91506138b882613877565b602082019050919050565b600060208201905081810360008301526138dc816138a0565b9050919050565b600081519050919050565b600081905092915050565b6000613904826138e3565b61390e81856138ee565b935061391e818560208601612744565b80840191505092915050565b600061393682846138f9565b91508190509291505056fea2646970667358221220e9e4e53b9f8992c33f7e8b6fe6edfea25181684ece93364e8ac6078350e99d9064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1215,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "farmInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(FarmInfo)1207_storage"
      },
      {
        "astId": 1217,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)1212_storage)"
      },
      {
        "astId": 1232,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "lpTokenPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1243,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "stakerRewardsToClaim",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1247,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "stakersCooldowns",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1251,
        "contract": "contracts/VLFI.sol:VLFI",
        "label": "userLFIDeposits",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)1212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VLFI.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FarmInfo)1207_storage": {
        "encoding": "inplace",
        "label": "struct VLFI.FarmInfo",
        "members": [
          {
            "astId": 1204,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "accRewardsPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1206,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)1212_storage": {
        "encoding": "inplace",
        "label": "struct VLFI.UserInfo",
        "members": [
          {
            "astId": 1209,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1211,
            "contract": "contracts/VLFI.sol:VLFI",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}